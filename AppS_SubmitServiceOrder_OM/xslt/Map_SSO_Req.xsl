<?xml version="1.0" encoding="UTF-8"?>
<!-- @generated mapFile="xslt/Map_SSO_Req.map" md5sum="24f3f60c79c5c4b52cd5ab1a1369b436" version="8.0.400" -->
<!--
*****************************************************************************
*   This file has been generated by the IBM XML Mapping Editor.
*
*   Mapping file:		Map_SSO_Req.map
*   Map declaration(s):	Map_SSO_Req
*   Input file(s):		smo://smo/name%3Dwsdl-primary/sharedContext%3D%257Bhttp%253A%252F%252FAppS_SubmitServiceOrder_OM%257DSharedBO/message%3D%257Bhttp%253A%252F%252FSterling_Library%252FGetServiceOrderMsg%257DgetServiceOrderMsgRequestMsg/xpath%3D%252F/smo.xsd
*   Output file(s):		smo://smo/name%3Dwsdl-primary/sharedContext%3D%257Bhttp%253A%252F%252FAppS_SubmitServiceOrder_OM%257DSharedBO/message%3D%257Bhttp%253A%252F%252FTPSMOAI%252FAIS%252FSubmitServiceOrder%257DinvokeMsg/xpath%3D%252F/smo.xsd
*
*   Note: Do not modify the contents of this file as it is overwritten
*         each time the mapping model is updated.
*****************************************************************************
-->
<xsl:stylesheet
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xltxe="http://www.ibm.com/xmlns/prod/xltxe-j"
    xmlns:math="http://exslt.org/math"
    xmlns:str="http://exslt.org/strings"
    xmlns:set="http://exslt.org/sets"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:date="http://exslt.org/dates-and-times"
    xmlns:fn="http://www.w3.org/2005/xpath-functions"
    xmlns:exsl="http://exslt.org/common"
    xmlns:xs4xs="http://www.w3.org/2001/XMLSchema"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:in2="http://Sterling_Library/GetServiceOrderMsg"
    xmlns:in3="http://www.sterlingcommerce.com/documentation/H3G/ServiceOrder/input"
    xmlns:io5="http://www.w3.org/2005/08/addressing"
    xmlns:io4="http://www.ibm.com/xmlns/prod/websphere/http/sca/6.1.0"
    xmlns:io3="http://www.ibm.com/websphere/sibx/smo/v6.0.1"
    xmlns:io2="http://www.ibm.com/xmlns/prod/websphere/mq/sca/6.0.0"
    xmlns:io6="http://www.w3.org/2003/05/soap-envelope"
    xmlns:io7="http://AppS_SubmitServiceOrder_OM"
    xmlns:in="wsdl.http://Sterling_Library/GetServiceOrderMsg"
    xmlns:io="http://schemas.xmlsoap.org/ws/2004/08/addressing"
    xmlns:out7="http://www.ibm.com/software/issw/telecom/pack/v8.5.0/lite/businessobject/system/fulfillment/extension"
    xmlns:out6="http://www.ibm.com/telecom/v8.5.0/businessobject/system/sid-v12.5/messageview"
    xmlns:out9="http://www.ibm.com/software/issw/telecom/pack/v8.5.0/lite/businessobject/system/assurance/extension"
    xmlns:out8="http://www.ibm.com/software/issw/telecom/pack/v8.5.0/lite/businessobject/system/common/extension"
    xmlns:out11="http://www.ibm.com/telecom/v8.5.0/businessobject/system/sid-v12.5/fulfillment/extensions"
    xmlns:out3="http://www.ibm.com/telecom/v8.5.0/businessobject/system/sid-v12.5/common"
    xmlns:out12="http://TPSMOAI/AIS/SubmitServiceOrder"
    xmlns:out2="http://www.ibm.com/telecom/v8.5.0/businessobject/system/sid-v12.5/systemview"
    xmlns:out5="http://TPCMN"
    xmlns:out10="http://www.ibm.com/software/issw/telecom/pack/v8.5.0/lite/businessobject/system/sid-v12.5"
    xmlns:out4="http://www.ibm.com/software/issw/telecom/pack/v8.5.0/lite/businessobject/system/billing/extension"
    xmlns:out15="http://www.ibm.com/telecom/v8.5.0/businessobject/system/sid-v12.5/billing/extensions"
    xmlns:out14="wsdl.http://TPSMOAI/AIS/SubmitServiceOrder"
    xmlns:out13="http://www.ibm.com/telecom/v8.5.0/businessobject/system/sid-v12.5/assurance/extensions"
    xmlns:out="http://www.ibm.com/telecom/v8.5.0/businessobject/system/sid-v12.5/common/extensions"
    xmlns:MapUtils="com.ibm.wbiserver.transform.util.MapUtils"
    xmlns:map="http://AppS_SubmitServiceOrder_OM/xslt/Map_OTA_req"
    xmlns:msl="http://www.ibm.com/xmlmap"
    exclude-result-prefixes="math str set xs date fn exsl MapUtils map xltxe msl"
    version="2.0">
  <xsl:output method="xml" encoding="UTF-8" indent="no"/>
  <xltxe:java-extension prefix="MapUtils" class="com.ibm.wbiserver.transform.util.MapUtils"/>

  <!-- root wrapper template  -->
  <xsl:template match="/">
    <xsl:choose>
      <xsl:when test="msl:datamap">
        <msl:datamap>
          <xsl:element name="dataObject">
            <xsl:attribute name="xsi:type">
              <xsl:value-of select="'io3:ServiceMessageObject'"/>
            </xsl:attribute>
            <xsl:call-template name="map:Map_SSO_Req2">
              <xsl:with-param name="smo" select="msl:datamap/dataObject[1]"/>
            </xsl:call-template>
          </xsl:element>
        </msl:datamap>
      </xsl:when>
      <xsl:otherwise>
        <xsl:apply-templates select="io3:smo" mode="map:Map_SSO_Req"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!-- This rule represents an element mapping: "io3:smo" to "io3:smo".  -->
  <xsl:template match="io3:smo"  mode="map:Map_SSO_Req">
    <io3:smo>
      <body>
        <xsl:attribute name="xsi:type">
          <xsl:value-of select="'out14:invokeMsg'"/>
        </xsl:attribute>
        <out12:invoke>
          <submitServiceOrderInput>
            <Header>
              <!-- a simple data mapping: "body/in2:getServiceOrderMsg/input/@OrderHeaderKey"(Key) to "out3:CorrelationId_T"(string) -->
              <xsl:if test="body/in2:getServiceOrderMsg/input/@OrderHeaderKey">
                <xsl:element name="out3:CorrelationId_T">
                  <xsl:value-of select="body/in2:getServiceOrderMsg/input/@OrderHeaderKey"/>
                </xsl:element>
              </xsl:if>
              <!-- a simple data mapping: "body/in2:getServiceOrderMsg/input/in3:Extn/@ExtnTargetOSS"(string) to "out3:destinationURI"(string) -->
              <xsl:if test="body/in2:getServiceOrderMsg/input/in3:Extn/@ExtnTargetOSS">
                <xsl:element name="out3:destinationURI">
                  <xsl:value-of select="body/in2:getServiceOrderMsg/input/in3:Extn/@ExtnTargetOSS"/>
                </xsl:element>
              </xsl:if>
            </Header>
            <Payload>
              <out2:ID>
                <!-- a simple data mapping: "body/in2:getServiceOrderMsg/input/@OrderHeaderKey"(Key) to "out3:ID"(string) -->
                <xsl:if test="body/in2:getServiceOrderMsg/input/@OrderHeaderKey">
                  <xsl:element name="out3:ID">
                    <xsl:value-of select="body/in2:getServiceOrderMsg/input/@OrderHeaderKey"/>
                  </xsl:element>
                </xsl:if>
                <!-- a simple data mapping: "body/in2:getServiceOrderMsg/input/@OrderType"(Text-20) to "out3:type"(string) -->
                <xsl:if test="body/in2:getServiceOrderMsg/input/@OrderType">
                  <xsl:element name="out3:type">
                    <xsl:value-of select="body/in2:getServiceOrderMsg/input/@OrderType"/>
                  </xsl:element>
                </xsl:if>
              </out2:ID>
              <out2:InteractionDetails>
                <out2:ID>
                  <!-- a simple data mapping: "body/in2:getServiceOrderMsg/input/in3:Extn/@ExtnCustomerOrderNo"(string) to "out3:ID"(string) -->
                  <xsl:if test="body/in2:getServiceOrderMsg/input/in3:Extn/@ExtnCustomerOrderNo">
                    <xsl:element name="out3:ID">
                      <xsl:value-of select="body/in2:getServiceOrderMsg/input/in3:Extn/@ExtnCustomerOrderNo"/>
                    </xsl:element>
                  </xsl:if>
                </out2:ID>
              </out2:InteractionDetails>
              <!-- a for-each transform: "in3:OrderLine"(<Anonymous>) to "out2:ServiceOrderDetails"(ServiceOrderItem) -->
              <xsl:apply-templates select="body/in2:getServiceOrderMsg/input/in3:OrderLines/in3:OrderLine" mode="localOrderLineToServiceOrderDetails_2013303836"/>
              <!-- a for-each transform: "in3:OrderLine"(<Anonymous>) to "out2:ServiceOrderDetails"(ServiceOrderItem) -->
              <xsl:apply-templates select="body/in2:getServiceOrderMsg/input/in3:ResourceDependancy/in3:OrderLine" mode="localOrderLineToServiceOrderDetails_1680903995"/>
            </Payload>
          </submitServiceOrderInput>
        </out12:invoke>
      </body>
    </io3:smo>
  </xsl:template>

  <!-- This rule represents a type mapping: "io3:smo" to "io3:smo".  -->
  <xsl:template name="map:Map_SSO_Req2">
    <xsl:param name="smo"/>
    <body>
      <xsl:attribute name="xsi:type">
        <xsl:value-of select="'out14:invokeMsg'"/>
      </xsl:attribute>
      <out12:invoke>
        <submitServiceOrderInput>
          <Header>
            <!-- a simple data mapping: "$smo/body/in2:getServiceOrderMsg/input/@OrderHeaderKey"(Key) to "out3:CorrelationId_T"(string) -->
            <xsl:if test="$smo/body/in2:getServiceOrderMsg/input/@OrderHeaderKey">
              <xsl:element name="out3:CorrelationId_T">
                <xsl:value-of select="$smo/body/in2:getServiceOrderMsg/input/@OrderHeaderKey"/>
              </xsl:element>
            </xsl:if>
            <!-- a simple data mapping: "$smo/body/in2:getServiceOrderMsg/input/in3:Extn/@ExtnTargetOSS"(string) to "out3:destinationURI"(string) -->
            <xsl:if test="$smo/body/in2:getServiceOrderMsg/input/in3:Extn/@ExtnTargetOSS">
              <xsl:element name="out3:destinationURI">
                <xsl:value-of select="$smo/body/in2:getServiceOrderMsg/input/in3:Extn/@ExtnTargetOSS"/>
              </xsl:element>
            </xsl:if>
          </Header>
          <Payload>
            <out2:ID>
              <!-- a simple data mapping: "$smo/body/in2:getServiceOrderMsg/input/@OrderHeaderKey"(Key) to "out3:ID"(string) -->
              <xsl:if test="$smo/body/in2:getServiceOrderMsg/input/@OrderHeaderKey">
                <xsl:element name="out3:ID">
                  <xsl:value-of select="$smo/body/in2:getServiceOrderMsg/input/@OrderHeaderKey"/>
                </xsl:element>
              </xsl:if>
              <!-- a simple data mapping: "$smo/body/in2:getServiceOrderMsg/input/@OrderType"(Text-20) to "out3:type"(string) -->
              <xsl:if test="$smo/body/in2:getServiceOrderMsg/input/@OrderType">
                <xsl:element name="out3:type">
                  <xsl:value-of select="$smo/body/in2:getServiceOrderMsg/input/@OrderType"/>
                </xsl:element>
              </xsl:if>
            </out2:ID>
            <out2:InteractionDetails>
              <out2:ID>
                <!-- a simple data mapping: "$smo/body/in2:getServiceOrderMsg/input/in3:Extn/@ExtnCustomerOrderNo"(string) to "out3:ID"(string) -->
                <xsl:if test="$smo/body/in2:getServiceOrderMsg/input/in3:Extn/@ExtnCustomerOrderNo">
                  <xsl:element name="out3:ID">
                    <xsl:value-of select="$smo/body/in2:getServiceOrderMsg/input/in3:Extn/@ExtnCustomerOrderNo"/>
                  </xsl:element>
                </xsl:if>
              </out2:ID>
            </out2:InteractionDetails>
            <!-- a for-each transform: "in3:OrderLine"(<Anonymous>) to "out2:ServiceOrderDetails"(ServiceOrderItem) -->
            <xsl:apply-templates select="$smo/body/in2:getServiceOrderMsg/input/in3:OrderLines/in3:OrderLine" mode="localOrderLineToServiceOrderDetails_2013303836"/>
            <!-- a for-each transform: "in3:OrderLine"(<Anonymous>) to "out2:ServiceOrderDetails"(ServiceOrderItem) -->
            <xsl:apply-templates select="$smo/body/in2:getServiceOrderMsg/input/in3:ResourceDependancy/in3:OrderLine" mode="localOrderLineToServiceOrderDetails_1680903995"/>
          </Payload>
        </submitServiceOrderInput>
      </out12:invoke>
    </body>
  </xsl:template>

  <!-- This rule represents a for-each transform: "in3:OrderLine" to "out2:ServiceOrderDetails".  -->
  <xsl:template match="in3:OrderLine"  mode="localOrderLineToServiceOrderDetails_2013303836">
    <out2:ServiceOrderDetails>
      <out2:BusinessInteractionItem>
        <out2:ID>
          <!-- a simple data mapping: "@OrderLineKey"(Key) to "out3:ID"(string) -->
          <xsl:if test="@OrderLineKey">
            <xsl:element name="out3:ID">
              <xsl:value-of select="@OrderLineKey"/>
            </xsl:element>
          </xsl:if>
        </out2:ID>
        <!-- a simple data mapping: "@Purpose"(Text-40) to "out2:action"(string) -->
        <xsl:if test="@Purpose">
          <xsl:element name="out2:action">
            <xsl:value-of select="@Purpose"/>
          </xsl:element>
        </xsl:if>
        <out2:Service>
          <out2:ID>
            <!-- a simple data mapping: "@LineType"(LineType) to "out3:type"(string) -->
            <xsl:if test="@LineType">
              <xsl:element name="out3:type">
                <xsl:value-of select="@LineType"/>
              </xsl:element>
            </xsl:if>
          </out2:ID>
          <!-- a simple data mapping: "in3:CustomAttributes/@serviceEnabled"(string) to "out2:isServiceEnabled"(boolean) -->
          <xsl:if test="in3:CustomAttributes/@serviceEnabled">
            <xsl:element name="out2:isServiceEnabled">
              <!-- variables for custom code -->
              <xsl:variable name="serviceEnabled" select="in3:CustomAttributes/@serviceEnabled"/>
              <xsl:value-of select="MapUtils:stringToBoolean($serviceEnabled, 'false')"/>
            </xsl:element>
          </xsl:if>
          <!-- a simple data mapping: "in3:CustomAttributes/@hasStarted"(string) to "out2:hasStarted"(boolean) -->
          <xsl:if test="in3:CustomAttributes/@hasStarted">
            <xsl:element name="out2:hasStarted">
              <!-- variables for custom code -->
              <xsl:variable name="hasStarted" select="in3:CustomAttributes/@hasStarted"/>
              <xsl:value-of select="MapUtils:stringToBoolean($hasStarted, 'false')"/>
            </xsl:element>
          </xsl:if>
          <!-- a simple data mapping: "in3:CustomAttributes/@mandatory"(string) to "out2:isMandatory"(boolean) -->
          <xsl:if test="in3:CustomAttributes/@mandatory">
            <xsl:element name="out2:isMandatory">
              <!-- variables for custom code -->
              <xsl:variable name="mandatory" select="in3:CustomAttributes/@mandatory"/>
              <xsl:value-of select="MapUtils:stringToBoolean($mandatory, 'false')"/>
            </xsl:element>
          </xsl:if>
          <!-- a simple data mapping: "in3:CustomAttributes/@stateful"(string) to "out2:isStateful"(boolean) -->
          <xsl:if test="in3:CustomAttributes/@stateful">
            <xsl:element name="out2:isStateful">
              <!-- variables for custom code -->
              <xsl:variable name="stateful" select="in3:CustomAttributes/@stateful"/>
              <xsl:value-of select="MapUtils:stringToBoolean($stateful, 'false')"/>
            </xsl:element>
          </xsl:if>
          <out2:CustomerFacingService>
            <out10:ID>
              <!-- variables for custom code -->
              <xsl:variable name="ItemID" select="in3:Item/@ItemID"/>
              <xsl:variable name="LineType1" select="@LineType"/>
              <xsl:if test="$LineType1 = &apos;CFS&apos;">
                <!-- a simple data mapping: "in3:Item/@ItemID"(ItemID) to "out3:ID"(string) -->
                <xsl:element name="out3:ID">
                  <xsl:value-of select="in3:Item/@ItemID"/>
                </xsl:element>
              </xsl:if>
            </out10:ID>
            <!-- variables for custom code -->
            <xsl:variable name="EXTNOrderLineProperties" select="in3:Extn/in3:EXTNOrderLinePropertiesList/in3:EXTNOrderLineProperties"/>
            <xsl:variable name="LineType" select="@LineType"/>
            <xsl:variable name="status1" select="in3:CustomAttributes/@status"/>
            <xsl:if test="$LineType = &apos;CFS&apos;">
              <!-- a for-each transform: "in3:EXTNOrderLineProperties"(<Anonymous>) to "out10:CharacteristicSpecification"(CharacteristicSpecification) -->
              <xsl:apply-templates select="in3:Extn/in3:EXTNOrderLinePropertiesList/in3:EXTNOrderLineProperties" mode="localEXTNOrderLinePropertiesToCharacteristicSpecification_2098900044"/>
              <!-- a structural mapping: "in3:CustomAttributes/@status"(string) to "out10:CharacteristicSpecification"(CharacteristicSpecification) -->
              <xsl:if test="in3:CustomAttributes/@status">
                <xsl:element name="out10:CharacteristicSpecification">
                  <!-- a simple mapping with no associated source:  to "out3:name"(string) -->
                  <xsl:element name="out3:name">
                    <xsl:text>status</xsl:text>
                  </xsl:element>
                  <out3:Value>
                    <out3:CharacteristicValue>
                      <!-- a simple data mapping: "in3:CustomAttributes/@status"(string) to "out3:value"(string) -->
                      <xsl:if test="in3:CustomAttributes/@status">
                        <xsl:element name="out3:value">
                          <xsl:value-of select="in3:CustomAttributes/@status"/>
                        </xsl:element>
                      </xsl:if>
                    </out3:CharacteristicValue>
                  </out3:Value>
                </xsl:element>
              </xsl:if>
            </xsl:if>
          </out2:CustomerFacingService>
          <out2:ResourceFacingServices>
            <out2:ID>
              <!-- variables for custom code -->
              <xsl:variable name="ItemID3" select="in3:Item/@ItemID"/>
              <xsl:variable name="LineType3" select="@LineType"/>
              <xsl:if test="$LineType3 = &apos;RFS&apos;">
                <!-- a simple data mapping: "in3:Item/@ItemID"(ItemID) to "out3:ID"(string) -->
                <xsl:element name="out3:ID">
                  <xsl:value-of select="in3:Item/@ItemID"/>
                </xsl:element>
              </xsl:if>
            </out2:ID>
            <!-- variables for custom code -->
            <xsl:variable name="EXTNOrderLineProperties1" select="in3:Extn/in3:EXTNOrderLinePropertiesList/in3:EXTNOrderLineProperties"/>
            <xsl:variable name="LineType1" select="@LineType"/>
            <xsl:variable name="status2" select="in3:CustomAttributes/@status"/>
            <xsl:if test="$LineType1 = &apos;RFS&apos;">
              <!-- a for-each transform: "in3:EXTNOrderLineProperties"(<Anonymous>) to "out2:CharacteristicSpecification"(CharacteristicSpecification) -->
              <xsl:apply-templates select="in3:Extn/in3:EXTNOrderLinePropertiesList/in3:EXTNOrderLineProperties" mode="localEXTNOrderLinePropertiesToCharacteristicSpecification_1128355383"/>
              <!-- a structural mapping: "in3:CustomAttributes/@status"(string) to "out2:CharacteristicSpecification"(CharacteristicSpecification) -->
              <xsl:if test="in3:CustomAttributes/@status">
                <xsl:element name="out2:CharacteristicSpecification">
                  <!-- a simple mapping with no associated source:  to "out3:name"(string) -->
                  <xsl:element name="out3:name">
                    <xsl:text>status</xsl:text>
                  </xsl:element>
                  <out3:Value>
                    <out3:CharacteristicValue>
                      <!-- a simple data mapping: "in3:CustomAttributes/@status"(string) to "out3:value"(string) -->
                      <xsl:if test="in3:CustomAttributes/@status">
                        <xsl:element name="out3:value">
                          <xsl:value-of select="in3:CustomAttributes/@status"/>
                        </xsl:element>
                      </xsl:if>
                    </out3:CharacteristicValue>
                  </out3:Value>
                </xsl:element>
              </xsl:if>
            </xsl:if>
          </out2:ResourceFacingServices>
          <!-- a structural mapping: "@ReqShipDate"(<Anonymous>) to "out2:CharacteristicSpecification"(CharacteristicSpecification) -->
          <xsl:if test="@ReqShipDate">
            <xsl:element name="out2:CharacteristicSpecification">
              <!-- a simple mapping with no associated source:  to "out3:name"(string) -->
              <xsl:element name="out3:name">
                <xsl:text>ReqShipDate</xsl:text>
              </xsl:element>
              <out3:Value>
                <out3:CharacteristicValue>
                  <!-- a simple data mapping: "@ReqShipDate"(<Anonymous>) to "out3:value"(string) -->
                  <xsl:if test="@ReqShipDate">
                    <xsl:element name="out3:value">
                      <xsl:value-of select="@ReqShipDate"/>
                    </xsl:element>
                  </xsl:if>
                </out3:CharacteristicValue>
              </out3:Value>
            </xsl:element>
          </xsl:if>
        </out2:Service>
      </out2:BusinessInteractionItem>
    </out2:ServiceOrderDetails>
  </xsl:template>

  <!-- This rule represents a for-each transform: "in3:EXTNOrderLineProperties" to "out10:CharacteristicSpecification".  -->
  <xsl:template match="in3:EXTNOrderLineProperties"  mode="localEXTNOrderLinePropertiesToCharacteristicSpecification_2098900044">
    <out10:CharacteristicSpecification>
      <!-- a simple data mapping: "@DescribedByCharacteristicName"(string) to "out3:name"(string) -->
      <xsl:if test="@DescribedByCharacteristicName">
        <out3:name>
          <xsl:value-of select="@DescribedByCharacteristicName"/>
        </out3:name>
      </xsl:if>
      <!-- a simple data mapping: "@DescribedByType"(string) to "out3:valueType"(string) -->
      <xsl:if test="@DescribedByType">
        <out3:valueType>
          <xsl:value-of select="@DescribedByType"/>
        </out3:valueType>
      </xsl:if>
      <!-- a simple data mapping: "@DescribedByCharacteristic"(string) to "out3:description"(string) -->
      <xsl:if test="@DescribedByCharacteristic">
        <out3:description>
          <xsl:value-of select="@DescribedByCharacteristic"/>
        </out3:description>
      </xsl:if>
      <out3:Value>
        <out3:CharacteristicValue>
          <!-- a simple data mapping: "@DescribedByValue"(string) to "out3:value"(string) -->
          <xsl:if test="@DescribedByValue">
            <xsl:element name="out3:value">
              <xsl:value-of select="@DescribedByValue"/>
            </xsl:element>
          </xsl:if>
        </out3:CharacteristicValue>
      </out3:Value>
      <!-- a structural mapping: "@CharacteristicEntityId"(string) to "out3:ComponentCharacteristicSpecification"(CharacteristicSpecification) -->
      <xsl:if test="@CharacteristicEntityId">
        <out3:ComponentCharacteristicSpecification>
          <!-- a simple mapping with no associated source:  to "out3:name"(string) -->
          <xsl:element name="out3:name">
            <xsl:text>CharacteristicEntityId</xsl:text>
          </xsl:element>
          <out3:Value>
            <out3:CharacteristicValue>
              <!-- a simple data mapping: "@CharacteristicEntityId"(string) to "out3:value"(string) -->
              <xsl:if test="@CharacteristicEntityId">
                <xsl:element name="out3:value">
                  <xsl:value-of select="@CharacteristicEntityId"/>
                </xsl:element>
              </xsl:if>
            </out3:CharacteristicValue>
          </out3:Value>
        </out3:ComponentCharacteristicSpecification>
      </xsl:if>
      <!-- a structural mapping: "@CharacteristicPath"(string) to "out3:ComponentCharacteristicSpecification"(CharacteristicSpecification) -->
      <xsl:if test="@CharacteristicPath">
        <out3:ComponentCharacteristicSpecification>
          <!-- a simple mapping with no associated source:  to "out3:name"(string) -->
          <xsl:element name="out3:name">
            <xsl:text>CharacteristicEntityPath</xsl:text>
          </xsl:element>
          <out3:Value>
            <out3:CharacteristicValue>
              <!-- a simple data mapping: "@CharacteristicPath"(string) to "out3:value"(string) -->
              <xsl:if test="@CharacteristicPath">
                <xsl:element name="out3:value">
                  <xsl:value-of select="@CharacteristicPath"/>
                </xsl:element>
              </xsl:if>
            </out3:CharacteristicValue>
          </out3:Value>
        </out3:ComponentCharacteristicSpecification>
      </xsl:if>
    </out10:CharacteristicSpecification>
  </xsl:template>

  <!-- This rule represents an element mapping: "CharacteristicEntityId" to "out3:ComponentCharacteristicSpecification".  -->
  <xsl:template match="CharacteristicEntityId"  mode="localCharacteristicEntityIdToComponentCharacteristicSpecification_305846397">
    <out3:ComponentCharacteristicSpecification>
      <!-- a simple mapping with no associated source:  to "out3:name"(string) -->
      <out3:name>
        <xsl:text>CharacteristicEntityId</xsl:text>
      </out3:name>
      <out3:Value>
        <out3:CharacteristicValue>
          <!-- a simple data mapping: "."(string) to "out3:value"(string) -->
          <xsl:if test=".">
            <xsl:element name="out3:value">
              <xsl:value-of select="."/>
            </xsl:element>
          </xsl:if>
        </out3:CharacteristicValue>
      </out3:Value>
    </out3:ComponentCharacteristicSpecification>
  </xsl:template>

  <!-- This rule represents an element mapping: "CharacteristicPath" to "out3:ComponentCharacteristicSpecification".  -->
  <xsl:template match="CharacteristicPath"  mode="localCharacteristicPathToComponentCharacteristicSpecification_1525448976">
    <out3:ComponentCharacteristicSpecification>
      <!-- a simple mapping with no associated source:  to "out3:name"(string) -->
      <out3:name>
        <xsl:text>CharacteristicEntityPath</xsl:text>
      </out3:name>
      <out3:Value>
        <out3:CharacteristicValue>
          <!-- a simple data mapping: "."(string) to "out3:value"(string) -->
          <xsl:if test=".">
            <xsl:element name="out3:value">
              <xsl:value-of select="."/>
            </xsl:element>
          </xsl:if>
        </out3:CharacteristicValue>
      </out3:Value>
    </out3:ComponentCharacteristicSpecification>
  </xsl:template>

  <!-- This rule represents an element mapping: "status" to "out10:CharacteristicSpecification".  -->
  <xsl:template match="status"  mode="localStatusToCharacteristicSpecification_1705561716">
    <out10:CharacteristicSpecification>
      <!-- a simple mapping with no associated source:  to "out3:name"(string) -->
      <out3:name>
        <xsl:text>status</xsl:text>
      </out3:name>
      <out3:Value>
        <out3:CharacteristicValue>
          <!-- a simple data mapping: "."(string) to "out3:value"(string) -->
          <xsl:if test=".">
            <xsl:element name="out3:value">
              <xsl:value-of select="."/>
            </xsl:element>
          </xsl:if>
        </out3:CharacteristicValue>
      </out3:Value>
    </out10:CharacteristicSpecification>
  </xsl:template>

  <!-- This rule represents a for-each transform: "in3:EXTNOrderLineProperties" to "out2:CharacteristicSpecification".  -->
  <xsl:template match="in3:EXTNOrderLineProperties"  mode="localEXTNOrderLinePropertiesToCharacteristicSpecification_1128355383">
    <out2:CharacteristicSpecification>
      <!-- a simple data mapping: "@DescribedByCharacteristicName"(string) to "out3:name"(string) -->
      <xsl:if test="@DescribedByCharacteristicName">
        <out3:name>
          <xsl:value-of select="@DescribedByCharacteristicName"/>
        </out3:name>
      </xsl:if>
      <!-- a simple data mapping: "@DescribedByType"(string) to "out3:valueType"(string) -->
      <xsl:if test="@DescribedByType">
        <out3:valueType>
          <xsl:value-of select="@DescribedByType"/>
        </out3:valueType>
      </xsl:if>
      <!-- a simple data mapping: "@DescribedByCharacteristic"(string) to "out3:description"(string) -->
      <xsl:if test="@DescribedByCharacteristic">
        <out3:description>
          <xsl:value-of select="@DescribedByCharacteristic"/>
        </out3:description>
      </xsl:if>
      <out3:Value>
        <out3:CharacteristicValue>
          <!-- a simple data mapping: "@DescribedByValue"(string) to "out3:value"(string) -->
          <xsl:if test="@DescribedByValue">
            <xsl:element name="out3:value">
              <xsl:value-of select="@DescribedByValue"/>
            </xsl:element>
          </xsl:if>
        </out3:CharacteristicValue>
      </out3:Value>
      <!-- a structural mapping: "@CharacteristicEntityId"(string) to "out3:ComponentCharacteristicSpecification"(CharacteristicSpecification) -->
      <xsl:if test="@CharacteristicEntityId">
        <out3:ComponentCharacteristicSpecification>
          <!-- a simple mapping with no associated source:  to "out3:name"(string) -->
          <xsl:element name="out3:name">
            <xsl:text>CharacteristicEntityId</xsl:text>
          </xsl:element>
          <out3:Value>
            <out3:CharacteristicValue>
              <!-- a simple data mapping: "@CharacteristicEntityId"(string) to "out3:value"(string) -->
              <xsl:if test="@CharacteristicEntityId">
                <xsl:element name="out3:value">
                  <xsl:value-of select="@CharacteristicEntityId"/>
                </xsl:element>
              </xsl:if>
            </out3:CharacteristicValue>
          </out3:Value>
        </out3:ComponentCharacteristicSpecification>
      </xsl:if>
      <!-- a structural mapping: "@CharacteristicPath"(string) to "out3:ComponentCharacteristicSpecification"(CharacteristicSpecification) -->
      <xsl:if test="@CharacteristicPath">
        <out3:ComponentCharacteristicSpecification>
          <!-- a simple mapping with no associated source:  to "out3:name"(string) -->
          <xsl:element name="out3:name">
            <xsl:text>CharacteristicEntityPath</xsl:text>
          </xsl:element>
          <out3:Value>
            <out3:CharacteristicValue>
              <!-- a simple data mapping: "@CharacteristicPath"(string) to "out3:value"(string) -->
              <xsl:if test="@CharacteristicPath">
                <xsl:element name="out3:value">
                  <xsl:value-of select="@CharacteristicPath"/>
                </xsl:element>
              </xsl:if>
            </out3:CharacteristicValue>
          </out3:Value>
        </out3:ComponentCharacteristicSpecification>
      </xsl:if>
    </out2:CharacteristicSpecification>
  </xsl:template>

  <!-- This rule represents an element mapping: "CharacteristicEntityId" to "out3:ComponentCharacteristicSpecification".  -->
  <xsl:template match="CharacteristicEntityId"  mode="localCharacteristicEntityIdToComponentCharacteristicSpecification_902367490">
    <out3:ComponentCharacteristicSpecification>
      <!-- a simple mapping with no associated source:  to "out3:name"(string) -->
      <out3:name>
        <xsl:text>CharacteristicEntityId</xsl:text>
      </out3:name>
      <out3:Value>
        <out3:CharacteristicValue>
          <!-- a simple data mapping: "."(string) to "out3:value"(string) -->
          <xsl:if test=".">
            <xsl:element name="out3:value">
              <xsl:value-of select="."/>
            </xsl:element>
          </xsl:if>
        </out3:CharacteristicValue>
      </out3:Value>
    </out3:ComponentCharacteristicSpecification>
  </xsl:template>

  <!-- This rule represents an element mapping: "CharacteristicPath" to "out3:ComponentCharacteristicSpecification".  -->
  <xsl:template match="CharacteristicPath"  mode="localCharacteristicPathToComponentCharacteristicSpecification_1613761679">
    <out3:ComponentCharacteristicSpecification>
      <!-- a simple mapping with no associated source:  to "out3:name"(string) -->
      <out3:name>
        <xsl:text>CharacteristicEntityPath</xsl:text>
      </out3:name>
      <out3:Value>
        <out3:CharacteristicValue>
          <!-- a simple data mapping: "."(string) to "out3:value"(string) -->
          <xsl:if test=".">
            <xsl:element name="out3:value">
              <xsl:value-of select="."/>
            </xsl:element>
          </xsl:if>
        </out3:CharacteristicValue>
      </out3:Value>
    </out3:ComponentCharacteristicSpecification>
  </xsl:template>

  <!-- This rule represents an element mapping: "status" to "out2:CharacteristicSpecification".  -->
  <xsl:template match="status"  mode="localStatusToCharacteristicSpecification_646160476">
    <out2:CharacteristicSpecification>
      <!-- a simple mapping with no associated source:  to "out3:name"(string) -->
      <out3:name>
        <xsl:text>status</xsl:text>
      </out3:name>
      <out3:Value>
        <out3:CharacteristicValue>
          <!-- a simple data mapping: "."(string) to "out3:value"(string) -->
          <xsl:if test=".">
            <xsl:element name="out3:value">
              <xsl:value-of select="."/>
            </xsl:element>
          </xsl:if>
        </out3:CharacteristicValue>
      </out3:Value>
    </out2:CharacteristicSpecification>
  </xsl:template>

  <!-- This rule represents an element mapping: "ReqShipDate" to "out2:CharacteristicSpecification".  -->
  <xsl:template match="ReqShipDate"  mode="localReqShipDateToCharacteristicSpecification_1661940367">
    <out2:CharacteristicSpecification>
      <!-- a simple mapping with no associated source:  to "out3:name"(string) -->
      <out3:name>
        <xsl:text>ReqShipDate</xsl:text>
      </out3:name>
      <out3:Value>
        <out3:CharacteristicValue>
          <!-- a simple data mapping: "."(<Anonymous>) to "out3:value"(string) -->
          <xsl:if test=".">
            <xsl:element name="out3:value">
              <xsl:value-of select="."/>
            </xsl:element>
          </xsl:if>
        </out3:CharacteristicValue>
      </out3:Value>
    </out2:CharacteristicSpecification>
  </xsl:template>

  <!-- This rule represents a for-each transform: "in3:OrderLine" to "out2:ServiceOrderDetails".  -->
  <xsl:template match="in3:OrderLine"  mode="localOrderLineToServiceOrderDetails_1680903995">
    <out2:ServiceOrderDetails>
      <out2:BusinessInteractionItem>
        <!-- a simple data mapping: "@Purpose"(Text-40) to "out2:action"(string) -->
        <xsl:if test="@Purpose">
          <xsl:element name="out2:action">
            <xsl:value-of select="@Purpose"/>
          </xsl:element>
        </xsl:if>
        <out2:Resource>
          <out2:ID>
            <!-- a simple data mapping: "@LineType"(LineType) to "out3:type"(string) -->
            <xsl:if test="@LineType">
              <xsl:element name="out3:type">
                <xsl:value-of select="@LineType"/>
              </xsl:element>
            </xsl:if>
          </out2:ID>
          <!-- variables for custom code -->
          <xsl:variable name="LineType6" select="@LineType"/>
          <xsl:variable name="ItemID6" select="in3:Item/@ItemID"/>
          <xsl:variable name="EXTNOrderLineProperties2" select="in3:Extn/in3:EXTNOrderLinePropertiesList/in3:EXTNOrderLineProperties"/>
          <xsl:if test="$LineType6 = &apos;LOGICAL_RESOURCE&apos;">
            <out2:LogicalResource>
              <out2:ID>
                <!-- a simple data mapping: "in3:Item/@ItemID"(ItemID) to "out3:ID"(string) -->
                <xsl:if test="in3:Item/@ItemID">
                  <xsl:element name="out3:ID">
                    <xsl:value-of select="in3:Item/@ItemID"/>
                  </xsl:element>
                </xsl:if>
              </out2:ID>
              <!-- a for-each transform: "in3:EXTNOrderLineProperties"(<Anonymous>) to "out2:CharacteristicSpecification"(CharacteristicSpecification) -->
              <xsl:apply-templates select="in3:Extn/in3:EXTNOrderLinePropertiesList/in3:EXTNOrderLineProperties" mode="localEXTNOrderLinePropertiesToCharacteristicSpecification_937549959"/>
            </out2:LogicalResource>
          </xsl:if>
          <!-- variables for custom code -->
          <xsl:variable name="EXTNOrderLineProperties3" select="in3:Extn/in3:EXTNOrderLinePropertiesList/in3:EXTNOrderLineProperties"/>
          <xsl:variable name="LineType7" select="@LineType"/>
          <xsl:variable name="ItemID8" select="in3:Item/@ItemID"/>
          <xsl:if test="$LineType7 = &apos;PHYSICAL_RESOURCE&apos;">
            <out2:PhysicalResource>
              <out2:ID>
                <!-- a simple data mapping: "in3:Item/@ItemID"(ItemID) to "out3:ID"(string) -->
                <xsl:if test="in3:Item/@ItemID">
                  <xsl:element name="out3:ID">
                    <xsl:value-of select="in3:Item/@ItemID"/>
                  </xsl:element>
                </xsl:if>
              </out2:ID>
              <!-- a for-each transform: "in3:EXTNOrderLineProperties"(<Anonymous>) to "out2:CharacteristicSpecification"(CharacteristicSpecification) -->
              <xsl:apply-templates select="in3:Extn/in3:EXTNOrderLinePropertiesList/in3:EXTNOrderLineProperties" mode="localEXTNOrderLinePropertiesToCharacteristicSpecification_425952547"/>
            </out2:PhysicalResource>
          </xsl:if>
        </out2:Resource>
      </out2:BusinessInteractionItem>
    </out2:ServiceOrderDetails>
  </xsl:template>

  <!-- This rule represents a for-each transform: "in3:EXTNOrderLineProperties" to "out2:CharacteristicSpecification".  -->
  <xsl:template match="in3:EXTNOrderLineProperties"  mode="localEXTNOrderLinePropertiesToCharacteristicSpecification_937549959">
    <out2:CharacteristicSpecification>
      <!-- a simple data mapping: "@DescribedByCharacteristicName"(string) to "out3:name"(string) -->
      <xsl:if test="@DescribedByCharacteristicName">
        <out3:name>
          <xsl:value-of select="@DescribedByCharacteristicName"/>
        </out3:name>
      </xsl:if>
      <!-- a simple data mapping: "@DescribedByType"(string) to "out3:valueType"(string) -->
      <xsl:if test="@DescribedByType">
        <out3:valueType>
          <xsl:value-of select="@DescribedByType"/>
        </out3:valueType>
      </xsl:if>
      <!-- a simple data mapping: "@DescribedByCharacteristic"(string) to "out3:description"(string) -->
      <xsl:if test="@DescribedByCharacteristic">
        <out3:description>
          <xsl:value-of select="@DescribedByCharacteristic"/>
        </out3:description>
      </xsl:if>
      <out3:Value>
        <out3:CharacteristicValue>
          <!-- a simple data mapping: "@DescribedByValue"(string) to "out3:value"(string) -->
          <xsl:if test="@DescribedByValue">
            <xsl:element name="out3:value">
              <xsl:value-of select="@DescribedByValue"/>
            </xsl:element>
          </xsl:if>
        </out3:CharacteristicValue>
      </out3:Value>
      <!-- a structural mapping: "@CharacteristicEntityId"(string) to "out3:ComponentCharacteristicSpecification"(CharacteristicSpecification) -->
      <xsl:if test="@CharacteristicEntityId">
        <out3:ComponentCharacteristicSpecification>
          <!-- a simple mapping with no associated source:  to "out3:name"(string) -->
          <xsl:element name="out3:name">
            <xsl:text>CharacteristicEntityId</xsl:text>
          </xsl:element>
          <out3:Value>
            <out3:CharacteristicValue>
              <!-- a simple data mapping: "@CharacteristicEntityId"(string) to "out3:value"(string) -->
              <xsl:if test="@CharacteristicEntityId">
                <xsl:element name="out3:value">
                  <xsl:value-of select="@CharacteristicEntityId"/>
                </xsl:element>
              </xsl:if>
            </out3:CharacteristicValue>
          </out3:Value>
        </out3:ComponentCharacteristicSpecification>
      </xsl:if>
      <!-- a structural mapping: "@CharacteristicPath"(string) to "out3:ComponentCharacteristicSpecification"(CharacteristicSpecification) -->
      <xsl:if test="@CharacteristicPath">
        <out3:ComponentCharacteristicSpecification>
          <!-- a simple mapping with no associated source:  to "out3:name"(string) -->
          <xsl:element name="out3:name">
            <xsl:text>CharacteristicEntityPath</xsl:text>
          </xsl:element>
          <out3:Value>
            <out3:CharacteristicValue>
              <!-- a simple data mapping: "@CharacteristicPath"(string) to "out3:value"(string) -->
              <xsl:if test="@CharacteristicPath">
                <xsl:element name="out3:value">
                  <xsl:value-of select="@CharacteristicPath"/>
                </xsl:element>
              </xsl:if>
            </out3:CharacteristicValue>
          </out3:Value>
        </out3:ComponentCharacteristicSpecification>
      </xsl:if>
    </out2:CharacteristicSpecification>
  </xsl:template>

  <!-- This rule represents an element mapping: "CharacteristicEntityId" to "out3:ComponentCharacteristicSpecification".  -->
  <xsl:template match="CharacteristicEntityId"  mode="localCharacteristicEntityIdToComponentCharacteristicSpecification_1154171846">
    <out3:ComponentCharacteristicSpecification>
      <!-- a simple mapping with no associated source:  to "out3:name"(string) -->
      <out3:name>
        <xsl:text>CharacteristicEntityId</xsl:text>
      </out3:name>
      <out3:Value>
        <out3:CharacteristicValue>
          <!-- a simple data mapping: "."(string) to "out3:value"(string) -->
          <xsl:if test=".">
            <xsl:element name="out3:value">
              <xsl:value-of select="."/>
            </xsl:element>
          </xsl:if>
        </out3:CharacteristicValue>
      </out3:Value>
    </out3:ComponentCharacteristicSpecification>
  </xsl:template>

  <!-- This rule represents an element mapping: "CharacteristicPath" to "out3:ComponentCharacteristicSpecification".  -->
  <xsl:template match="CharacteristicPath"  mode="localCharacteristicPathToComponentCharacteristicSpecification_315571287">
    <out3:ComponentCharacteristicSpecification>
      <!-- a simple mapping with no associated source:  to "out3:name"(string) -->
      <out3:name>
        <xsl:text>CharacteristicEntityPath</xsl:text>
      </out3:name>
      <out3:Value>
        <out3:CharacteristicValue>
          <!-- a simple data mapping: "."(string) to "out3:value"(string) -->
          <xsl:if test=".">
            <xsl:element name="out3:value">
              <xsl:value-of select="."/>
            </xsl:element>
          </xsl:if>
        </out3:CharacteristicValue>
      </out3:Value>
    </out3:ComponentCharacteristicSpecification>
  </xsl:template>

  <!-- This rule represents a for-each transform: "in3:EXTNOrderLineProperties" to "out2:CharacteristicSpecification".  -->
  <xsl:template match="in3:EXTNOrderLineProperties"  mode="localEXTNOrderLinePropertiesToCharacteristicSpecification_425952547">
    <out2:CharacteristicSpecification>
      <!-- a simple data mapping: "@DescribedByCharacteristicName"(string) to "out3:name"(string) -->
      <xsl:if test="@DescribedByCharacteristicName">
        <out3:name>
          <xsl:value-of select="@DescribedByCharacteristicName"/>
        </out3:name>
      </xsl:if>
      <!-- a simple data mapping: "@DescribedByType"(string) to "out3:valueType"(string) -->
      <xsl:if test="@DescribedByType">
        <out3:valueType>
          <xsl:value-of select="@DescribedByType"/>
        </out3:valueType>
      </xsl:if>
      <!-- a simple data mapping: "@DescribedByCharacteristic"(string) to "out3:description"(string) -->
      <xsl:if test="@DescribedByCharacteristic">
        <out3:description>
          <xsl:value-of select="@DescribedByCharacteristic"/>
        </out3:description>
      </xsl:if>
      <out3:Value>
        <out3:CharacteristicValue>
          <!-- a simple data mapping: "@DescribedByValue"(string) to "out3:value"(string) -->
          <xsl:if test="@DescribedByValue">
            <xsl:element name="out3:value">
              <xsl:value-of select="@DescribedByValue"/>
            </xsl:element>
          </xsl:if>
        </out3:CharacteristicValue>
      </out3:Value>
      <!-- a structural mapping: "@CharacteristicEntityId"(string) to "out3:ComponentCharacteristicSpecification"(CharacteristicSpecification) -->
      <xsl:if test="@CharacteristicEntityId">
        <out3:ComponentCharacteristicSpecification>
          <!-- a simple mapping with no associated source:  to "out3:name"(string) -->
          <xsl:element name="out3:name">
            <xsl:text>CharacteristicEntityId</xsl:text>
          </xsl:element>
          <out3:Value>
            <out3:CharacteristicValue>
              <!-- a simple data mapping: "@CharacteristicEntityId"(string) to "out3:value"(string) -->
              <xsl:if test="@CharacteristicEntityId">
                <xsl:element name="out3:value">
                  <xsl:value-of select="@CharacteristicEntityId"/>
                </xsl:element>
              </xsl:if>
            </out3:CharacteristicValue>
          </out3:Value>
        </out3:ComponentCharacteristicSpecification>
      </xsl:if>
      <!-- a structural mapping: "@CharacteristicPath"(string) to "out3:ComponentCharacteristicSpecification"(CharacteristicSpecification) -->
      <xsl:if test="@CharacteristicPath">
        <out3:ComponentCharacteristicSpecification>
          <!-- a simple mapping with no associated source:  to "out3:name"(string) -->
          <xsl:element name="out3:name">
            <xsl:text>CharacteristicEntityPath</xsl:text>
          </xsl:element>
          <out3:Value>
            <out3:CharacteristicValue>
              <!-- a simple data mapping: "@CharacteristicPath"(string) to "out3:value"(string) -->
              <xsl:if test="@CharacteristicPath">
                <xsl:element name="out3:value">
                  <xsl:value-of select="@CharacteristicPath"/>
                </xsl:element>
              </xsl:if>
            </out3:CharacteristicValue>
          </out3:Value>
        </out3:ComponentCharacteristicSpecification>
      </xsl:if>
    </out2:CharacteristicSpecification>
  </xsl:template>

  <!-- This rule represents an element mapping: "CharacteristicEntityId" to "out3:ComponentCharacteristicSpecification".  -->
  <xsl:template match="CharacteristicEntityId"  mode="localCharacteristicEntityIdToComponentCharacteristicSpecification_2533438">
    <out3:ComponentCharacteristicSpecification>
      <!-- a simple mapping with no associated source:  to "out3:name"(string) -->
      <out3:name>
        <xsl:text>CharacteristicEntityId</xsl:text>
      </out3:name>
      <out3:Value>
        <out3:CharacteristicValue>
          <!-- a simple data mapping: "."(string) to "out3:value"(string) -->
          <xsl:if test=".">
            <xsl:element name="out3:value">
              <xsl:value-of select="."/>
            </xsl:element>
          </xsl:if>
        </out3:CharacteristicValue>
      </out3:Value>
    </out3:ComponentCharacteristicSpecification>
  </xsl:template>

  <!-- This rule represents an element mapping: "CharacteristicPath" to "out3:ComponentCharacteristicSpecification".  -->
  <xsl:template match="CharacteristicPath"  mode="localCharacteristicPathToComponentCharacteristicSpecification_1724407653">
    <out3:ComponentCharacteristicSpecification>
      <!-- a simple mapping with no associated source:  to "out3:name"(string) -->
      <out3:name>
        <xsl:text>CharacteristicEntityPath</xsl:text>
      </out3:name>
      <out3:Value>
        <out3:CharacteristicValue>
          <!-- a simple data mapping: "."(string) to "out3:value"(string) -->
          <xsl:if test=".">
            <xsl:element name="out3:value">
              <xsl:value-of select="."/>
            </xsl:element>
          </xsl:if>
        </out3:CharacteristicValue>
      </out3:Value>
    </out3:ComponentCharacteristicSpecification>
  </xsl:template>

  <!-- *****************    Utility Templates    ******************  -->
  <!-- copy the namespace declarations from the source to the target -->
  <xsl:template name="copyNamespaceDeclarations">
    <xsl:param name="root"/>
    <xsl:for-each select="$root/namespace::node()[not(name() = '')]">
      <xsl:copy/>
    </xsl:for-each>
  </xsl:template>
</xsl:stylesheet>
