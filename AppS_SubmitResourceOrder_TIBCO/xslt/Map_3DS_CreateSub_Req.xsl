<?xml version="1.0" encoding="UTF-8"?>
<!-- @generated mapFile="xslt/Map_3DS_CreateSub_Req.map" md5sum="109ffb1a67eb9f97cc3ada05784ab20f" version="8.0.400" -->
<!--
*****************************************************************************
*   This file has been generated by the IBM XML Mapping Editor.
*
*   Mapping file:		Map_3DS_CreateSub_Req.map
*   Map declaration(s):	Map_3DS_CreateSub_Req
*   Input file(s):		smo://smo/name%3Dwsdl-primary/sharedContext%3D%257Bhttp%253A%252F%252FAS_SubmitResourceOrder_TIBCO%257DTibco_SharedBO/message%3D%257Bhttp%253A%252F%252Fh3g.ibm.serviceactivation.threeDS%257DcreateSubscriptionResponseMsg/xpath%3D%252F/smo.xsd
*   Output file(s):		smo://smo/name%3Dwsdl-primary/sharedContext%3D%257Bhttp%253A%252F%252FAS_SubmitResourceOrder_TIBCO%257DTibco_SharedBO/message%3D%257Bhttp%253A%252F%252Fthree.co.uk%252Fwsdl%252Fresourceorder-3ds%252Fv1%257DaddRequestRequest/xpath%3D%252F/smo.xsd
*
*   Note: Do not modify the contents of this file as it is overwritten
*         each time the mapping model is updated.
*****************************************************************************
-->
<xsl:stylesheet
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xltxe="http://www.ibm.com/xmlns/prod/xltxe-j"
    xmlns:math="http://exslt.org/math"
    xmlns:str="http://exslt.org/strings"
    xmlns:set="http://exslt.org/sets"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:date="http://exslt.org/dates-and-times"
    xmlns:fn="http://www.w3.org/2005/xpath-functions"
    xmlns:exsl="http://exslt.org/common"
    xmlns:xs4xs="http://www.w3.org/2001/XMLSchema"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:in2="http://h3g.ibm.serviceactivation.threeDS"
    xmlns:in4="http://www.ibm.com/software/issw/telecom/pack/v8.5.0/lite/businessobject/system/sid-v12.5"
    xmlns:in3="http://www.ibm.com/software/issw/telecom/pack/v8.5.0/lite/businessobject/system/assurance/extension"
    xmlns:io5="urn:siemens:names:prov:gw:SPML:2:0"
    xmlns:io4="http://www.ibm.com/telecom/v8.5.0/businessobject/system/sid-v12.5/common"
    xmlns:io3="http://www.ibm.com/websphere/sibx/smo/v6.0.1"
    xmlns:io2="http://www.ibm.com/xmlns/prod/websphere/mq/sca/6.0.0"
    xmlns:in="http://www.ibm.com/telecom/v8.5.0/businessobject/system/sid-v12.5/common/extensions"
    xmlns:io="http://schemas.xmlsoap.org/ws/2004/08/addressing"
    xmlns:in14="http://www.ibm.com/telecom/v8.5.0/businessobject/system/sid-v12.5/billing/extensions"
    xmlns:io10="http://TIBCO_OSS_Library"
    xmlns:in11="http://www.ibm.com/software/issw/telecom/pack/v8.5.0/lite/businessobject/system/common/extension"
    xmlns:in9="http://www.ibm.com/telecom/v8.5.0/businessobject/system/sid-v12.5/messageview"
    xmlns:io8="http://www.w3.org/2005/08/addressing"
    xmlns:in10="wsdl.http://h3g.ibm.serviceactivation.threeDS"
    xmlns:io9="http://AS_SubmitResourceOrder_TIBCO"
    xmlns:in13="http://www.ibm.com/telecom/v8.5.0/businessobject/system/sid-v12.5/assurance/extensions"
    xmlns:io6="http://www.ibm.com/xmlns/prod/websphere/http/sca/6.1.0"
    xmlns:io11="http://www.w3.org/2003/05/soap-envelope"
    xmlns:in12="http://www.ibm.com/telecom/v8.5.0/businessobject/system/sid-v12.5/fulfillment/extensions"
    xmlns:io7="http://TPCMN"
    xmlns:in5="http://www.ibm.com/telecom/v8.5.0/businessobject/system/sid-v12.5/systemview"
    xmlns:in6="urn:siemens:names:prov:gw:MA_SUBSCRIBER:1:0"
    xmlns:in7="http://www.ibm.com/software/issw/telecom/pack/v8.5.0/lite/businessobject/system/billing/extension"
    xmlns:in8="http://www.ibm.com/software/issw/telecom/pack/v8.5.0/lite/businessobject/system/fulfillment/extension"
    xmlns:out2="urn:siemens:names:prov:gw:H3GSUBSCRIBER:1:0"
    xmlns:out="wsdl.http://three.co.uk/wsdl/resourceorder-3ds/v1"
    xmlns:in15="urn:siemens:names:prov:gw:EIR_NSR:1:0"
    xmlns:MapUtils="com.ibm.wbiserver.transform.util.MapUtils"
    xmlns:map="http://AppS_SubmitResourceOrder_TIBCO/xslt/Map_SDM_CreateSub_Req"
    xmlns:msl="http://www.ibm.com/xmlmap"
    exclude-result-prefixes="math str set xs date fn exsl MapUtils map xltxe msl"
    version="2.0">
  <xsl:output method="xml" encoding="UTF-8" indent="no"/>
  <xltxe:java-extension prefix="MapUtils" class="com.ibm.wbiserver.transform.util.MapUtils"/>

  <!-- root wrapper template  -->
  <xsl:template match="/">
    <xsl:choose>
      <xsl:when test="msl:datamap">
        <msl:datamap>
          <xsl:element name="dataObject">
            <xsl:attribute name="xsi:type">
              <xsl:value-of select="'io3:ServiceMessageObject'"/>
            </xsl:attribute>
            <xsl:call-template name="map:Map_3DS_CreateSub_Req2">
              <xsl:with-param name="smo" select="msl:datamap/dataObject[1]"/>
            </xsl:call-template>
          </xsl:element>
        </msl:datamap>
      </xsl:when>
      <xsl:otherwise>
        <xsl:apply-templates select="io3:smo" mode="map:Map_3DS_CreateSub_Req"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!-- This rule represents an element mapping: "io3:smo" to "io3:smo".  -->
  <xsl:template match="io3:smo"  mode="map:Map_3DS_CreateSub_Req">
    <io3:smo>
      <context>
        <!-- a structural mapping: "context/shared"(Tibco_SharedBO) to "shared"(Tibco_SharedBO) -->
        <xsl:if test="context/shared">
          <xsl:copy-of select="context/shared" copy-namespaces="yes"/>
        </xsl:if>
      </context>
      <body>
        <xsl:attribute name="xsi:type">
          <xsl:value-of select="'out:addRequestRequest'"/>
        </xsl:attribute>
        <!-- a structural mapping: "body/in2:createSubscriptionResponse/spmlAddRequest"(AddRequest) to "io5:addRequest"(AddRequest) -->
        <xsl:apply-templates select="body/in2:createSubscriptionResponse/spmlAddRequest" mode="localSpmlAddRequestToAddRequest_1682066707"/>
      </body>
    </io3:smo>
  </xsl:template>

  <!-- This rule represents a type mapping: "io3:smo" to "io3:smo".  -->
  <xsl:template name="map:Map_3DS_CreateSub_Req2">
    <xsl:param name="smo"/>
    <context>
      <!-- a structural mapping: "$smo/context/shared"(Tibco_SharedBO) to "shared"(Tibco_SharedBO) -->
      <xsl:if test="$smo/context/shared">
        <xsl:copy-of select="$smo/context/shared" copy-namespaces="yes"/>
      </xsl:if>
    </context>
    <body>
      <xsl:attribute name="xsi:type">
        <xsl:value-of select="'out:addRequestRequest'"/>
      </xsl:attribute>
      <!-- a structural mapping: "$smo/body/in2:createSubscriptionResponse/spmlAddRequest"(AddRequest) to "io5:addRequest"(AddRequest) -->
      <xsl:apply-templates select="$smo/body/in2:createSubscriptionResponse/spmlAddRequest" mode="localSpmlAddRequestToAddRequest_1682066707"/>
    </body>
  </xsl:template>

  <!-- This rule represents an element mapping: "spmlAddRequest" to "io5:addRequest".  -->
  <xsl:template match="spmlAddRequest"  mode="localSpmlAddRequestToAddRequest_1682066707">
    <io5:addRequest>
      <!-- a simple data mapping: "@callback"(string) to "callback"(string) -->
      <xsl:if test="@callback">
        <xsl:attribute name="callback">
          <xsl:value-of select="@callback"/>
        </xsl:attribute>
      </xsl:if>
      <!-- a simple data mapping: "@execution"(ExecutionType) to "execution"(ExecutionType) -->
      <xsl:if test="@execution">
        <xsl:attribute name="execution">
          <xsl:value-of select="@execution"/>
        </xsl:attribute>
      </xsl:if>
      <!-- a simple data mapping: "@language"(LanguageType) to "language"(LanguageType) -->
      <xsl:if test="@language">
        <xsl:attribute name="language">
          <xsl:value-of select="@language"/>
        </xsl:attribute>
      </xsl:if>
      <!-- a simple data mapping: "@newGenerated"(boolean) to "newGenerated"(boolean) -->
      <xsl:if test="@newGenerated">
        <xsl:attribute name="newGenerated">
          <xsl:value-of select="@newGenerated"/>
        </xsl:attribute>
      </xsl:if>
      <!-- a simple data mapping: "@requestID"(string) to "requestID"(string) -->
      <xsl:if test="@requestID">
        <xsl:attribute name="requestID">
          <xsl:value-of select="@requestID"/>
        </xsl:attribute>
      </xsl:if>
      <!-- a simple data mapping: "@timestamp"(boolean) to "timestamp"(boolean) -->
      <xsl:if test="@timestamp">
        <xsl:attribute name="timestamp">
          <xsl:value-of select="@timestamp"/>
        </xsl:attribute>
      </xsl:if>
      <!-- a simple data mapping: "@returnResultingObject"(ReturnResultingObjectType) to "returnResultingObject"(ReturnResultingObjectType) -->
      <xsl:if test="@returnResultingObject">
        <xsl:attribute name="returnResultingObject">
          <xsl:value-of select="@returnResultingObject"/>
        </xsl:attribute>
      </xsl:if>
      <operationalAttributes>
        <!-- a for-each transform: "attributes"(Attribute) to "attributes"(Attribute) -->
        <xsl:apply-templates select="operationalAttributes/attributes" mode="localAttributesToAttributes_1109941030"/>
      </operationalAttributes>
      <object>
        <!-- a structural mapping: "H3G3DS_object"(Subscriber) to "Subscriber"(Subscriber) -->
        <xsl:apply-templates select="H3G3DS_object" mode="localH3G3DS_objectToSubscriber_637412459"/>
      </object>
    </io5:addRequest>
  </xsl:template>

  <!-- This rule represents a for-each transform: "attributes" to "attributes".  -->
  <xsl:template match="attributes"  mode="localAttributesToAttributes_1109941030">
    <attributes>
      <!-- a simple data mapping: "key"(string) to "key"(string) -->
      <key>
        <xsl:value-of select="key"/>
      </key>
      <!-- a simple data mapping: "value"(string) to "value"(string) -->
      <xsl:for-each select="value">
        <value>
          <xsl:value-of select="."/>
        </value>
      </xsl:for-each>
    </attributes>
  </xsl:template>

  <!-- This rule represents an element mapping: "H3G3DS_object" to "Subscriber".  -->
  <xsl:template match="H3G3DS_object"  mode="localH3G3DS_objectToSubscriber_637412459">
    <Subscriber>
      <!-- a simple data mapping: "identifier"(string) to "identifier"(string) -->
      <xsl:if test="identifier">
        <identifier>
          <xsl:value-of select="identifier"/>
        </identifier>
      </xsl:if>
      <!-- a for-each transform: "auc"(AUC) to "auc"(AUC) -->
      <xsl:for-each select="auc">
        <auc>
          <xsl:choose>
            <xsl:when test="substring-after(./@xsi:type,':')='AUC'">
              <!-- variables for custom code -->
              <xsl:variable name="auc" select="."/>
              <xsl:call-template name="copyNamespaceDeclarations">
                <xsl:with-param name="root" select="$auc"/>
              </xsl:call-template>
              <xsl:copy-of select="$auc/@*|$auc/node()" copy-namespaces="yes"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:if test="./imsi">
                <imsi>
                  <xsl:value-of select="./imsi"/>
                </imsi>
              </xsl:if>
              <xsl:if test="./encKey">
                <encKey>
                  <xsl:value-of select="./encKey"/>
                </encKey>
              </xsl:if>
              <xsl:if test="./iccId">
                <iccId>
                  <xsl:value-of select="./iccId"/>
                </iccId>
              </xsl:if>
              <xsl:if test="./algoId">
                <algoId>
                  <xsl:value-of select="./algoId"/>
                </algoId>
              </xsl:if>
              <xsl:if test="./cv">
                <cv>
                  <xsl:value-of select="./cv"/>
                </cv>
              </xsl:if>
              <xsl:if test="./hmac">
                <hmac>
                  <xsl:value-of select="./hmac"/>
                </hmac>
              </xsl:if>
              <xsl:if test="./kdbId">
                <kdbId>
                  <xsl:value-of select="./kdbId"/>
                </kdbId>
              </xsl:if>
              <xsl:if test="./acsub">
                <acsub>
                  <xsl:value-of select="./acsub"/>
                </acsub>
              </xsl:if>
              <xsl:if test="./amf">
                <amf>
                  <xsl:value-of select="./amf"/>
                </amf>
              </xsl:if>
              <xsl:if test="./sqn">
                <sqn>
                  <xsl:value-of select="./sqn"/>
                </sqn>
              </xsl:if>
              <xsl:if test="./opcEncKey">
                <opcEncKey>
                  <xsl:value-of select="./opcEncKey"/>
                </opcEncKey>
              </xsl:if>
            </xsl:otherwise>
          </xsl:choose>
        </auc>
      </xsl:for-each>
      <!-- a structural mapping: "profile"(Profile) to "profile"(Profile) -->
      <xsl:if test="profile">
        <profile>
          <xsl:choose>
            <xsl:when test="substring-after(profile/@xsi:type,':')='Profile'">
              <!-- variables for custom code -->
              <xsl:variable name="profile" select="profile"/>
              <xsl:call-template name="copyNamespaceDeclarations">
                <xsl:with-param name="root" select="$profile"/>
              </xsl:call-template>
              <xsl:copy-of select="$profile/@*|$profile/node()" copy-namespaces="yes"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:if test="profile/givenName">
                <givenName>
                  <xsl:value-of select="profile/givenName"/>
                </givenName>
              </xsl:if>
              <xsl:if test="profile/surname">
                <surname>
                  <xsl:value-of select="profile/surname"/>
                </surname>
              </xsl:if>
              <xsl:if test="profile/username">
                <username>
                  <xsl:value-of select="profile/username"/>
                </username>
              </xsl:if>
              <xsl:if test="profile/password">
                <password>
                  <xsl:value-of select="profile/password"/>
                </password>
              </xsl:if>
              <xsl:if test="profile/loginPassword">
                <loginPassword>
                  <xsl:value-of select="profile/loginPassword"/>
                </loginPassword>
              </xsl:if>
              <xsl:if test="profile/prepaid">
                <prepaid>
                  <xsl:value-of select="profile/prepaid"/>
                </prepaid>
              </xsl:if>
              <xsl:if test="profile/roamingAllowed">
                <roamingAllowed>
                  <xsl:value-of select="profile/roamingAllowed"/>
                </roamingAllowed>
              </xsl:if>
            </xsl:otherwise>
          </xsl:choose>
        </profile>
      </xsl:if>
      <!-- a structural mapping: "h3g"(h3g) to "h3g"(h3g) -->
      <xsl:if test="h3g">
        <h3g>
          <xsl:choose>
            <xsl:when test="substring-after(h3g/@xsi:type,':')='h3g'">
              <!-- variables for custom code -->
              <xsl:variable name="h3g" select="h3g"/>
              <xsl:call-template name="copyNamespaceDeclarations">
                <xsl:with-param name="root" select="$h3g"/>
              </xsl:call-template>
              <xsl:copy-of select="$h3g/@*|$h3g/node()" copy-namespaces="yes"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:if test="h3g/subISID">
                <subISID>
                  <xsl:value-of select="h3g/subISID"/>
                </subISID>
              </xsl:if>
              <xsl:if test="h3g/subPrimaryMSISDN">
                <subPrimaryMSISDN>
                  <xsl:value-of select="h3g/subPrimaryMSISDN"/>
                </subPrimaryMSISDN>
              </xsl:if>
              <xsl:if test="h3g/subBAN">
                <subBAN>
                  <xsl:value-of select="h3g/subBAN"/>
                </subBAN>
              </xsl:if>
              <xsl:if test="h3g/subIMSI">
                <subIMSI>
                  <xsl:value-of select="h3g/subIMSI"/>
                </subIMSI>
              </xsl:if>
              <xsl:if test="h3g/subAccounttype">
                <subAccounttype>
                  <xsl:value-of select="h3g/subAccounttype"/>
                </subAccounttype>
              </xsl:if>
              <xsl:if test="h3g/subOrganisation">
                <subOrganisation>
                  <xsl:value-of select="h3g/subOrganisation"/>
                </subOrganisation>
              </xsl:if>
              <xsl:if test="h3g/subSubtype">
                <subSubtype>
                  <xsl:value-of select="h3g/subSubtype"/>
                </subSubtype>
              </xsl:if>
              <xsl:if test="h3g/subDoB">
                <subDoB>
                  <xsl:value-of select="h3g/subDoB"/>
                </subDoB>
              </xsl:if>
              <xsl:if test="h3g/subGender">
                <subGender>
                  <xsl:value-of select="h3g/subGender"/>
                </subGender>
              </xsl:if>
              <xsl:if test="h3g/subPosIMEI">
                <subPosIMEI>
                  <xsl:value-of select="h3g/subPosIMEI"/>
                </subPosIMEI>
              </xsl:if>
              <xsl:if test="h3g/subICCID">
                <subICCID>
                  <xsl:value-of select="h3g/subICCID"/>
                </subICCID>
              </xsl:if>
              <xsl:if test="h3g/h3gTermCap">
                <h3gTermCap>
                  <xsl:copy-of select="h3g/h3gTermCap/@*|h3g/h3gTermCap/node()|h3g/h3gTermCap/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
                </h3gTermCap>
              </xsl:if>
              <xsl:if test="h3g/h3gAccessControl">
                <h3gAccessControl>
                  <xsl:copy-of select="h3g/h3gAccessControl/@*|h3g/h3gAccessControl/node()|h3g/h3gAccessControl/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
                </h3gAccessControl>
              </xsl:if>
              <xsl:for-each select="h3g/h3gMobility">
                <h3gMobility>
                  <xsl:copy-of select="null" copy-namespaces="yes"/>
                </h3gMobility>
              </xsl:for-each>
              <xsl:if test="h3g/h3gServiceSet">
                <h3gServiceSet>
                  <xsl:copy-of select="h3g/h3gServiceSet/@*|h3g/h3gServiceSet/node()|h3g/h3gServiceSet/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
                </h3gServiceSet>
              </xsl:if>
              <xsl:for-each select="h3g/h3gSubFreeUnit">
                <h3gSubFreeUnit>
                  <xsl:copy-of select="null" copy-namespaces="yes"/>
                </h3gSubFreeUnit>
              </xsl:for-each>
              <xsl:for-each select="h3g/h3gSubQosProfile">
                <h3gSubQosProfile>
                  <xsl:copy-of select="null" copy-namespaces="yes"/>
                </h3gSubQosProfile>
              </xsl:for-each>
              <xsl:for-each select="h3g/h3gSubTariffAddOnVoucher">
                <h3gSubTariffAddOnVoucher>
                  <xsl:copy-of select="null" copy-namespaces="yes"/>
                </h3gSubTariffAddOnVoucher>
              </xsl:for-each>
              <xsl:for-each select="h3g/h3gDiscretionaryAllowance">
                <h3gDiscretionaryAllowance>
                  <xsl:copy-of select="null" copy-namespaces="yes"/>
                </h3gDiscretionaryAllowance>
              </xsl:for-each>
              <xsl:for-each select="h3g/h3gSubAddress">
                <h3gSubAddress>
                  <xsl:copy-of select="null" copy-namespaces="yes"/>
                </h3gSubAddress>
              </xsl:for-each>
              <xsl:for-each select="h3g/h3gSubMarketing">
                <h3gSubMarketing>
                  <xsl:copy-of select="null" copy-namespaces="yes"/>
                </h3gSubMarketing>
              </xsl:for-each>
            </xsl:otherwise>
          </xsl:choose>
        </h3g>
      </xsl:if>
      <!-- a structural mapping: "h3gIn"(h3gIn) to "h3gIn"(h3gIn) -->
      <xsl:if test="h3gIn">
        <h3gIn>
          <xsl:choose>
            <xsl:when test="substring-after(h3gIn/@xsi:type,':')='h3gIn'">
              <!-- variables for custom code -->
              <xsl:variable name="h3gIn" select="h3gIn"/>
              <xsl:call-template name="copyNamespaceDeclarations">
                <xsl:with-param name="root" select="$h3gIn"/>
              </xsl:call-template>
              <xsl:copy-of select="$h3gIn/@*|$h3gIn/node()" copy-namespaces="yes"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:if test="h3gIn/inPINCode">
                <inPINCode>
                  <xsl:value-of select="h3gIn/inPINCode"/>
                </inPINCode>
              </xsl:if>
              <xsl:if test="h3gIn/inCurPIN">
                <inCurPIN>
                  <xsl:value-of select="h3gIn/inCurPIN"/>
                </inCurPIN>
              </xsl:if>
              <xsl:if test="h3gIn/inUserLang">
                <inUserLang>
                  <xsl:value-of select="h3gIn/inUserLang"/>
                </inUserLang>
              </xsl:if>
              <xsl:if test="h3gIn/inMNPAnn">
                <inMNPAnn>
                  <xsl:value-of select="h3gIn/inMNPAnn"/>
                </inMNPAnn>
              </xsl:if>
              <xsl:if test="h3gIn/inDivertCC">
                <inDivertCC>
                  <xsl:value-of select="h3gIn/inDivertCC"/>
                </inDivertCC>
              </xsl:if>
              <xsl:if test="h3gIn/inFaxMSISDN">
                <inFaxMSISDN>
                  <xsl:value-of select="h3gIn/inFaxMSISDN"/>
                </inFaxMSISDN>
              </xsl:if>
              <xsl:if test="h3gIn/inSrvId11">
                <inSrvId11>
                  <xsl:value-of select="h3gIn/inSrvId11"/>
                </inSrvId11>
              </xsl:if>
              <xsl:if test="h3gIn/inSrvId12">
                <inSrvId12>
                  <xsl:value-of select="h3gIn/inSrvId12"/>
                </inSrvId12>
              </xsl:if>
              <xsl:if test="h3gIn/inSrvId13">
                <inSrvId13>
                  <xsl:value-of select="h3gIn/inSrvId13"/>
                </inSrvId13>
              </xsl:if>
              <xsl:if test="h3gIn/inSrvId14">
                <inSrvId14>
                  <xsl:value-of select="h3gIn/inSrvId14"/>
                </inSrvId14>
              </xsl:if>
              <xsl:if test="h3gIn/inSrvId15">
                <inSrvId15>
                  <xsl:value-of select="h3gIn/inSrvId15"/>
                </inSrvId15>
              </xsl:if>
              <xsl:if test="h3gIn/inSrvId16">
                <inSrvId16>
                  <xsl:value-of select="h3gIn/inSrvId16"/>
                </inSrvId16>
              </xsl:if>
              <xsl:if test="h3gIn/inSrvId17">
                <inSrvId17>
                  <xsl:value-of select="h3gIn/inSrvId17"/>
                </inSrvId17>
              </xsl:if>
              <xsl:if test="h3gIn/inSrvId18">
                <inSrvId18>
                  <xsl:value-of select="h3gIn/inSrvId18"/>
                </inSrvId18>
              </xsl:if>
              <xsl:if test="h3gIn/inSrvId19">
                <inSrvId19>
                  <xsl:value-of select="h3gIn/inSrvId19"/>
                </inSrvId19>
              </xsl:if>
              <xsl:if test="h3gIn/inSrvId20">
                <inSrvId20>
                  <xsl:value-of select="h3gIn/inSrvId20"/>
                </inSrvId20>
              </xsl:if>
              <xsl:if test="h3gIn/inSrvId21">
                <inSrvId21>
                  <xsl:value-of select="h3gIn/inSrvId21"/>
                </inSrvId21>
              </xsl:if>
              <xsl:if test="h3gIn/inSrvId22">
                <inSrvId22>
                  <xsl:value-of select="h3gIn/inSrvId22"/>
                </inSrvId22>
              </xsl:if>
              <xsl:if test="h3gIn/inSrvId23">
                <inSrvId23>
                  <xsl:value-of select="h3gIn/inSrvId23"/>
                </inSrvId23>
              </xsl:if>
              <xsl:if test="h3gIn/inSrvId24">
                <inSrvId24>
                  <xsl:value-of select="h3gIn/inSrvId24"/>
                </inSrvId24>
              </xsl:if>
              <xsl:if test="h3gIn/inSrvId25">
                <inSrvId25>
                  <xsl:value-of select="h3gIn/inSrvId25"/>
                </inSrvId25>
              </xsl:if>
              <xsl:if test="h3gIn/inSrvId26">
                <inSrvId26>
                  <xsl:value-of select="h3gIn/inSrvId26"/>
                </inSrvId26>
              </xsl:if>
              <xsl:if test="h3gIn/inSrvId27">
                <inSrvId27>
                  <xsl:value-of select="h3gIn/inSrvId27"/>
                </inSrvId27>
              </xsl:if>
              <xsl:if test="h3gIn/inSrvId28">
                <inSrvId28>
                  <xsl:value-of select="h3gIn/inSrvId28"/>
                </inSrvId28>
              </xsl:if>
              <xsl:if test="h3gIn/inSrvId29">
                <inSrvId29>
                  <xsl:value-of select="h3gIn/inSrvId29"/>
                </inSrvId29>
              </xsl:if>
              <xsl:if test="h3gIn/inSrvId30">
                <inSrvId30>
                  <xsl:value-of select="h3gIn/inSrvId30"/>
                </inSrvId30>
              </xsl:if>
              <xsl:for-each select="h3gIn/h3gInAccount">
                <h3gInAccount>
                  <xsl:copy-of select="null" copy-namespaces="yes"/>
                </h3gInAccount>
              </xsl:for-each>
            </xsl:otherwise>
          </xsl:choose>
        </h3gIn>
      </xsl:if>
      <!-- a simple data mapping: "isVoid"(boolean) to "isVoid"(boolean) -->
      <xsl:if test="isVoid">
        <isVoid>
          <xsl:value-of select="isVoid"/>
        </isVoid>
      </xsl:if>
      <!-- a simple data mapping: "masteredBy"(int) to "masteredBy"(int) -->
      <xsl:if test="masteredBy">
        <masteredBy>
          <xsl:value-of select="masteredBy"/>
        </masteredBy>
      </xsl:if>
    </Subscriber>
  </xsl:template>

  <!-- *****************    Utility Templates    ******************  -->
  <!-- copy the namespace declarations from the source to the target -->
  <xsl:template name="copyNamespaceDeclarations">
    <xsl:param name="root"/>
    <xsl:for-each select="$root/namespace::node()[not(name() = '')]">
      <xsl:copy/>
    </xsl:for-each>
  </xsl:template>
</xsl:stylesheet>
