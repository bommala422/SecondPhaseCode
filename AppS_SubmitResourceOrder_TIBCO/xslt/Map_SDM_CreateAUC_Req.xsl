<?xml version="1.0" encoding="UTF-8"?>
<!-- @generated mapFile="xslt/Map_SDM_CreateAUC_Req.map" md5sum="93e30364894ca158e153311cd9a41c9e" version="8.0.400" -->
<!--
*****************************************************************************
*   This file has been generated by the IBM XML Mapping Editor.
*
*   Mapping file:		Map_SDM_CreateAUC_Req.map
*   Map declaration(s):	Map_SDM_CreateAUC_Req
*   Input file(s):		smo://smo/name%3Dwsdl-primary/sharedContext%3D%257Bhttp%253A%252F%252FAS_SubmitResourceOrder_TIBCO%257DTibco_SharedBO/message%3D%257Bhttp%253A%252F%252Fh3g.ibm.serviceactivation.sdm%257DcreateAUCResponseMsg/xpath%3D%252F/smo.xsd
*   Output file(s):		smo://smo/name%3Dwsdl-primary/sharedContext%3D%257Bhttp%253A%252F%252FAS_SubmitResourceOrder_TIBCO%257DTibco_SharedBO/message%3D%257Bhttp%253A%252F%252Fthree.co.uk%252Fwsdl%252Fas_sdm_093%252Fserviceordersdm%252Fv1%257DADDRequest/xpath%3D%252F/smo.xsd
*
*   Note: Do not modify the contents of this file as it is overwritten
*         each time the mapping model is updated.
*****************************************************************************
-->
<xsl:stylesheet
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xltxe="http://www.ibm.com/xmlns/prod/xltxe-j"
    xmlns:math="http://exslt.org/math"
    xmlns:str="http://exslt.org/strings"
    xmlns:set="http://exslt.org/sets"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:date="http://exslt.org/dates-and-times"
    xmlns:fn="http://www.w3.org/2005/xpath-functions"
    xmlns:exsl="http://exslt.org/common"
    xmlns:xs4xs="http://www.w3.org/2001/XMLSchema"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:in2="http://www.ibm.com/software/issw/telecom/pack/v8.5.0/lite/businessobject/system/assurance/extension"
    xmlns:in4="http://www.ibm.com/telecom/v8.5.0/businessobject/system/sid-v12.5/systemview"
    xmlns:in3="http://www.ibm.com/software/issw/telecom/pack/v8.5.0/lite/businessobject/system/sid-v12.5"
    xmlns:io5="urn:siemens:names:prov:gw:SPML:2:0"
    xmlns:io4="http://www.ibm.com/telecom/v8.5.0/businessobject/system/sid-v12.5/common"
    xmlns:io3="http://www.ibm.com/websphere/sibx/smo/v6.0.1"
    xmlns:io2="http://www.ibm.com/xmlns/prod/websphere/mq/sca/6.0.0"
    xmlns:in="http://www.ibm.com/telecom/v8.5.0/businessobject/system/sid-v12.5/common/extensions"
    xmlns:io="http://schemas.xmlsoap.org/ws/2004/08/addressing"
    xmlns:in11="http://www.ibm.com/telecom/v8.5.0/businessobject/system/sid-v12.5/assurance/extensions"
    xmlns:io10="http://TIBCO_OSS_Library"
    xmlns:in9="http://www.ibm.com/software/issw/telecom/pack/v8.5.0/lite/businessobject/system/common/extension"
    xmlns:io8="http://www.w3.org/2005/08/addressing"
    xmlns:in10="http://www.ibm.com/telecom/v8.5.0/businessobject/system/sid-v12.5/fulfillment/extensions"
    xmlns:io9="http://AS_SubmitResourceOrder_TIBCO"
    xmlns:in13="http://www.ibm.com/telecom/v8.5.0/businessobject/system/sid-v12.5/billing/extensions"
    xmlns:io6="http://www.ibm.com/xmlns/prod/websphere/http/sca/6.1.0"
    xmlns:in12="wsdl.http://h3g.ibm.serviceactivation.sdm"
    xmlns:io11="http://www.w3.org/2003/05/soap-envelope"
    xmlns:io7="http://TPCMN"
    xmlns:in5="http://h3g.ibm.serviceactivation.sdm"
    xmlns:in6="http://www.ibm.com/software/issw/telecom/pack/v8.5.0/lite/businessobject/system/billing/extension"
    xmlns:in7="http://www.ibm.com/software/issw/telecom/pack/v8.5.0/lite/businessobject/system/fulfillment/extension"
    xmlns:in8="http://www.ibm.com/telecom/v8.5.0/businessobject/system/sid-v12.5/messageview"
    xmlns:out3="urn:siemens:names:prov:gw:EIR_NSR:1:0"
    xmlns:out2="wsdl.http://three.co.uk/wsdl/as_sdm_093/serviceordersdm/v1"
    xmlns:out="urn:siemens:names:prov:gw:MA_SUBSCRIBER:1:0"
    xmlns:in14="urn:siemens:names:prov:gw:H3GSUBSCRIBER:1:0"
    xmlns:MapUtils="com.ibm.wbiserver.transform.util.MapUtils"
    xmlns:map="http://AppS_SubmitResourceOrder_TIBCO/xslt/Map_SDM_CreateAUC_Req"
    xmlns:msl="http://www.ibm.com/xmlmap"
    exclude-result-prefixes="math str set xs date fn exsl MapUtils map xltxe msl"
    version="2.0">
  <xsl:output method="xml" encoding="UTF-8" indent="no"/>
  <xltxe:java-extension prefix="MapUtils" class="com.ibm.wbiserver.transform.util.MapUtils"/>

  <!-- root wrapper template  -->
  <xsl:template match="/">
    <xsl:choose>
      <xsl:when test="msl:datamap">
        <msl:datamap>
          <xsl:element name="dataObject">
            <xsl:attribute name="xsi:type">
              <xsl:value-of select="'io3:ServiceMessageObject'"/>
            </xsl:attribute>
            <xsl:call-template name="map:Map_SDM_CreateAUC_Req2">
              <xsl:with-param name="smo" select="msl:datamap/dataObject[1]"/>
            </xsl:call-template>
          </xsl:element>
        </msl:datamap>
      </xsl:when>
      <xsl:otherwise>
        <xsl:apply-templates select="io3:smo" mode="map:Map_SDM_CreateAUC_Req"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!-- This rule represents an element mapping: "io3:smo" to "io3:smo".  -->
  <xsl:template match="io3:smo"  mode="map:Map_SDM_CreateAUC_Req">
    <io3:smo>
      <context>
        <!-- a structural mapping: "context/shared"(Tibco_SharedBO) to "shared"(Tibco_SharedBO) -->
        <xsl:if test="context/shared">
          <xsl:copy-of select="context/shared" copy-namespaces="yes"/>
        </xsl:if>
      </context>
      <body>
        <xsl:attribute name="xsi:type">
          <xsl:value-of select="'out2:ADDRequest'"/>
        </xsl:attribute>
        <!-- a structural mapping: "body/in5:createAUCResponse/spmlAddRequest"(AddRequest) to "io5:addRequest"(AddRequest) -->
        <xsl:apply-templates select="body/in5:createAUCResponse/spmlAddRequest" mode="localSpmlAddRequestToAddRequest_595442469"/>
      </body>
    </io3:smo>
  </xsl:template>

  <!-- This rule represents a type mapping: "io3:smo" to "io3:smo".  -->
  <xsl:template name="map:Map_SDM_CreateAUC_Req2">
    <xsl:param name="smo"/>
    <context>
      <!-- a structural mapping: "$smo/context/shared"(Tibco_SharedBO) to "shared"(Tibco_SharedBO) -->
      <xsl:if test="$smo/context/shared">
        <xsl:copy-of select="$smo/context/shared" copy-namespaces="yes"/>
      </xsl:if>
    </context>
    <body>
      <xsl:attribute name="xsi:type">
        <xsl:value-of select="'out2:ADDRequest'"/>
      </xsl:attribute>
      <!-- a structural mapping: "$smo/body/in5:createAUCResponse/spmlAddRequest"(AddRequest) to "io5:addRequest"(AddRequest) -->
      <xsl:apply-templates select="$smo/body/in5:createAUCResponse/spmlAddRequest" mode="localSpmlAddRequestToAddRequest_595442469"/>
    </body>
  </xsl:template>

  <!-- This rule represents an element mapping: "spmlAddRequest" to "io5:addRequest".  -->
  <xsl:template match="spmlAddRequest"  mode="localSpmlAddRequestToAddRequest_595442469">
    <io5:addRequest>
      <!-- a simple data mapping: "@callback"(string) to "callback"(string) -->
      <xsl:if test="@callback">
        <xsl:attribute name="callback">
          <xsl:value-of select="@callback"/>
        </xsl:attribute>
      </xsl:if>
      <!-- a simple data mapping: "@execution"(ExecutionType) to "execution"(ExecutionType) -->
      <xsl:if test="@execution">
        <xsl:attribute name="execution">
          <xsl:value-of select="@execution"/>
        </xsl:attribute>
      </xsl:if>
      <!-- a simple data mapping: "@language"(LanguageType) to "language"(LanguageType) -->
      <xsl:if test="@language">
        <xsl:attribute name="language">
          <xsl:value-of select="@language"/>
        </xsl:attribute>
      </xsl:if>
      <!-- a simple data mapping: "@newGenerated"(boolean) to "newGenerated"(boolean) -->
      <xsl:if test="@newGenerated">
        <xsl:attribute name="newGenerated">
          <xsl:value-of select="@newGenerated"/>
        </xsl:attribute>
      </xsl:if>
      <!-- a simple data mapping: "@requestID"(string) to "requestID"(string) -->
      <xsl:if test="@requestID">
        <xsl:attribute name="requestID">
          <xsl:value-of select="@requestID"/>
        </xsl:attribute>
      </xsl:if>
      <!-- a simple data mapping: "@timestamp"(boolean) to "timestamp"(boolean) -->
      <xsl:if test="@timestamp">
        <xsl:attribute name="timestamp">
          <xsl:value-of select="@timestamp"/>
        </xsl:attribute>
      </xsl:if>
      <!-- a simple data mapping: "@returnResultingObject"(ReturnResultingObjectType) to "returnResultingObject"(ReturnResultingObjectType) -->
      <xsl:if test="@returnResultingObject">
        <xsl:attribute name="returnResultingObject">
          <xsl:value-of select="@returnResultingObject"/>
        </xsl:attribute>
      </xsl:if>
      <!-- a structural mapping: "operationalAttributes"(Attributes) to "operationalAttributes"(Attributes) -->
      <xsl:if test="operationalAttributes">
        <operationalAttributes>
          <xsl:choose>
            <xsl:when test="substring-after(operationalAttributes/@xsi:type,':')='Attributes'">
              <!-- variables for custom code -->
              <xsl:variable name="operationalAttributes" select="operationalAttributes"/>
              <xsl:call-template name="copyNamespaceDeclarations">
                <xsl:with-param name="root" select="$operationalAttributes"/>
              </xsl:call-template>
              <xsl:copy-of select="$operationalAttributes/@*|$operationalAttributes/node()" copy-namespaces="yes"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:for-each select="operationalAttributes/attributes">
                <attributes>
                  <xsl:copy-of select="null" copy-namespaces="yes"/>
                </attributes>
              </xsl:for-each>
            </xsl:otherwise>
          </xsl:choose>
        </operationalAttributes>
      </xsl:if>
      <!-- a simple data mapping: "version"(string) to "version"(string) -->
      <version>
        <xsl:value-of select="version"/>
      </version>
      <object>
        <!-- a simple data mapping: "object/identifier"(string) to "identifier"(string) -->
        <xsl:if test="object/identifier">
          <xsl:element name="identifier">
            <xsl:value-of select="object/identifier"/>
          </xsl:element>
        </xsl:if>
        <!-- a structural mapping: "object"(Subscriber) to "Subscriber"(Subscriber1) -->
        <xsl:apply-templates select="object" mode="localObjectToSubscriber_424808899"/>
      </object>
    </io5:addRequest>
  </xsl:template>

  <!-- This rule represents an element mapping: "object" to "Subscriber".  -->
  <xsl:template match="object"  mode="localObjectToSubscriber_424808899">
    <Subscriber>
      <!-- a for-each transform: "auc"(AUC) to "auc"(AUC) -->
      <xsl:apply-templates select="auc" mode="localAucToAuc_1783744575"/>
      <!-- a structural mapping: "profile"(Profile) to "profile"(Profile) -->
      <xsl:apply-templates select="profile" mode="localProfileToProfile_1685540754"/>
      <!-- a structural mapping: "hlr"(HLR) to "hlr"(HLR) -->
      <xsl:apply-templates select="hlr" mode="localHlrToHlr_1348927767"/>
      <!-- a structural mapping: "hss"(HSS) to "hss"(HSS) -->
      <xsl:if test="hss">
        <hss>
          <xsl:choose>
            <xsl:when test="substring-after(hss/@xsi:type,':')='HSS'">
              <!-- variables for custom code -->
              <xsl:variable name="hss" select="hss"/>
              <xsl:call-template name="copyNamespaceDeclarations">
                <xsl:with-param name="root" select="$hss"/>
              </xsl:call-template>
              <xsl:copy-of select="$hss/@*|$hss/node()" copy-namespaces="yes"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:if test="hss/subscriptionId">
                <subscriptionId>
                  <xsl:value-of select="hss/subscriptionId"/>
                </subscriptionId>
              </xsl:if>
              <xsl:if test="hss/scscfDestinationRealm">
                <scscfDestinationRealm>
                  <xsl:value-of select="hss/scscfDestinationRealm"/>
                </scscfDestinationRealm>
              </xsl:if>
              <xsl:if test="hss/profileType">
                <profileType>
                  <xsl:value-of select="hss/profileType"/>
                </profileType>
              </xsl:if>
              <xsl:if test="hss/adminBlocked">
                <adminBlocked>
                  <xsl:value-of select="hss/adminBlocked"/>
                </adminBlocked>
              </xsl:if>
              <xsl:if test="hss/defaultScscfRequired">
                <defaultScscfRequired>
                  <xsl:value-of select="hss/defaultScscfRequired"/>
                </defaultScscfRequired>
              </xsl:if>
              <xsl:if test="hss/maximumPrivateIds">
                <maximumPrivateIds>
                  <xsl:value-of select="hss/maximumPrivateIds"/>
                </maximumPrivateIds>
              </xsl:if>
              <xsl:if test="hss/maximumPublicIds">
                <maximumPublicIds>
                  <xsl:value-of select="hss/maximumPublicIds"/>
                </maximumPublicIds>
              </xsl:if>
              <xsl:if test="hss/subscriptionExpiryDate">
                <subscriptionExpiryDate>
                  <xsl:value-of select="hss/subscriptionExpiryDate"/>
                </subscriptionExpiryDate>
              </xsl:if>
              <xsl:if test="hss/scscfSipAddress">
                <scscfSipAddress>
                  <xsl:value-of select="hss/scscfSipAddress"/>
                </scscfSipAddress>
              </xsl:if>
              <xsl:if test="hss/scscfHost">
                <scscfHost>
                  <xsl:value-of select="hss/scscfHost"/>
                </scscfHost>
              </xsl:if>
              <xsl:if test="hss/sharedIFCSupport">
                <sharedIFCSupport>
                  <xsl:value-of select="hss/sharedIFCSupport"/>
                </sharedIFCSupport>
              </xsl:if>
              <xsl:if test="hss/chargingGroupId">
                <chargingGroupId>
                  <xsl:value-of select="hss/chargingGroupId"/>
                </chargingGroupId>
              </xsl:if>
              <xsl:if test="hss/ccfPrimary">
                <ccfPrimary>
                  <xsl:value-of select="hss/ccfPrimary"/>
                </ccfPrimary>
              </xsl:if>
              <xsl:if test="hss/ccfSecondary">
                <ccfSecondary>
                  <xsl:value-of select="hss/ccfSecondary"/>
                </ccfSecondary>
              </xsl:if>
              <xsl:if test="hss/directRoutingSipAddress">
                <directRoutingSipAddress>
                  <xsl:value-of select="hss/directRoutingSipAddress"/>
                </directRoutingSipAddress>
              </xsl:if>
              <xsl:if test="hss/commonMsisdn">
                <commonMsisdn>
                  <xsl:value-of select="hss/commonMsisdn"/>
                </commonMsisdn>
              </xsl:if>
              <xsl:if test="hss/suppressAliasForImsiMsisdn">
                <suppressAliasForImsiMsisdn>
                  <xsl:value-of select="hss/suppressAliasForImsiMsisdn"/>
                </suppressAliasForImsiMsisdn>
              </xsl:if>
              <xsl:if test="hss/ecfPrimary">
                <ecfPrimary>
                  <xsl:value-of select="hss/ecfPrimary"/>
                </ecfPrimary>
              </xsl:if>
              <xsl:if test="hss/ecfSecondary">
                <ecfSecondary>
                  <xsl:value-of select="hss/ecfSecondary"/>
                </ecfSecondary>
              </xsl:if>
              <xsl:for-each select="hss/privateUserId">
                <privateUserId>
                  <xsl:copy-of select="null" copy-namespaces="yes"/>
                </privateUserId>
              </xsl:for-each>
              <xsl:for-each select="hss/implicitRegisteredSet">
                <implicitRegisteredSet>
                  <xsl:copy-of select="null" copy-namespaces="yes"/>
                </implicitRegisteredSet>
              </xsl:for-each>
              <xsl:for-each select="hss/publicUserId">
                <publicUserId>
                  <xsl:copy-of select="null" copy-namespaces="yes"/>
                </publicUserId>
              </xsl:for-each>
              <xsl:for-each select="hss/serviceProfile">
                <serviceProfile>
                  <xsl:copy-of select="null" copy-namespaces="yes"/>
                </serviceProfile>
              </xsl:for-each>
              <xsl:for-each select="hss/repositoryData">
                <repositoryData>
                  <xsl:copy-of select="null" copy-namespaces="yes"/>
                </repositoryData>
              </xsl:for-each>
              <xsl:for-each select="hss/notification">
                <notification>
                  <xsl:copy-of select="null" copy-namespaces="yes"/>
                </notification>
              </xsl:for-each>
              <xsl:for-each select="hss/pprTriggerInfo">
                <pprTriggerInfo>
                  <xsl:copy-of select="null" copy-namespaces="yes"/>
                </pprTriggerInfo>
              </xsl:for-each>
              <xsl:for-each select="hss/gussData">
                <gussData>
                  <xsl:copy-of select="null" copy-namespaces="yes"/>
                </gussData>
              </xsl:for-each>
              <xsl:for-each select="hss/aliasGroup">
                <aliasGroup>
                  <xsl:copy-of select="null" copy-namespaces="yes"/>
                </aliasGroup>
              </xsl:for-each>
              <xsl:for-each select="hss/aliasRepositoryData">
                <aliasRepositoryData>
                  <xsl:copy-of select="null" copy-namespaces="yes"/>
                </aliasRepositoryData>
              </xsl:for-each>
            </xsl:otherwise>
          </xsl:choose>
        </hss>
      </xsl:if>
      <!-- a structural mapping: "mnp"(MNP) to "mnp"(MNP) -->
      <xsl:if test="mnp">
        <mnp>
          <xsl:choose>
            <xsl:when test="substring-after(mnp/@xsi:type,':')='MNP'">
              <!-- variables for custom code -->
              <xsl:variable name="mnp" select="mnp"/>
              <xsl:call-template name="copyNamespaceDeclarations">
                <xsl:with-param name="root" select="$mnp"/>
              </xsl:call-template>
              <xsl:copy-of select="$mnp/@*|$mnp/node()" copy-namespaces="yes"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:for-each select="mnp/portedMsisdn">
                <portedMsisdn>
                  <xsl:copy-of select="null" copy-namespaces="yes"/>
                </portedMsisdn>
              </xsl:for-each>
            </xsl:otherwise>
          </xsl:choose>
        </mnp>
      </xsl:if>
      <!-- a structural mapping: "eir"(EIR) to "eir"(EIR) -->
      <xsl:if test="eir">
        <eir>
          <xsl:choose>
            <xsl:when test="substring-after(eir/@xsi:type,':')='EIR'">
              <!-- variables for custom code -->
              <xsl:variable name="eir" select="eir"/>
              <xsl:call-template name="copyNamespaceDeclarations">
                <xsl:with-param name="root" select="$eir"/>
              </xsl:call-template>
              <xsl:copy-of select="$eir/@*|$eir/node()" copy-namespaces="yes"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:if test="eir/fastBlackList">
                <fastBlackList>
                  <xsl:value-of select="eir/fastBlackList"/>
                </fastBlackList>
              </xsl:if>
              <xsl:if test="eir/lockedImsiImei">
                <lockedImsiImei>
                  <xsl:value-of select="eir/lockedImsiImei"/>
                </lockedImsiImei>
              </xsl:if>
              <xsl:if test="eir/dualImsi">
                <dualImsi>
                  <xsl:value-of select="eir/dualImsi"/>
                </dualImsi>
              </xsl:if>
              <xsl:for-each select="eir/imeiHistory">
                <imeiHistory>
                  <xsl:copy-of select="null" copy-namespaces="yes"/>
                </imeiHistory>
              </xsl:for-each>
              <xsl:if test="eir/deviceSetReference">
                <deviceSetReference>
                  <xsl:value-of select="eir/deviceSetReference"/>
                </deviceSetReference>
              </xsl:if>
              <xsl:if test="eir/newDeviceSetReference">
                <newDeviceSetReference>
                  <xsl:value-of select="eir/newDeviceSetReference"/>
                </newDeviceSetReference>
              </xsl:if>
              <xsl:if test="eir/newDeviceSetRefActTime">
                <newDeviceSetRefActTime>
                  <xsl:value-of select="eir/newDeviceSetRefActTime"/>
                </newDeviceSetRefActTime>
              </xsl:if>
              <xsl:if test="eir/imsi">
                <imsi>
                  <xsl:value-of select="eir/imsi"/>
                </imsi>
              </xsl:if>
            </xsl:otherwise>
          </xsl:choose>
        </eir>
      </xsl:if>
      <!-- a simple data mapping: "isVoid"(boolean) to "isVoid"(boolean) -->
      <xsl:if test="isVoid">
        <isVoid>
          <xsl:value-of select="isVoid"/>
        </isVoid>
      </xsl:if>
      <!-- a simple data mapping: "masteredBy"(int) to "masteredBy"(int) -->
      <xsl:if test="masteredBy">
        <masteredBy>
          <xsl:value-of select="masteredBy"/>
        </masteredBy>
      </xsl:if>
    </Subscriber>
  </xsl:template>

  <!-- This rule represents a for-each transform: "auc" to "auc".  -->
  <xsl:template match="auc"  mode="localAucToAuc_1783744575">
    <auc>
      <!-- a simple data mapping: "imsi"(string) to "imsi"(string) -->
      <xsl:if test="imsi">
        <imsi>
          <xsl:value-of select="imsi"/>
        </imsi>
      </xsl:if>
      <!-- a simple data mapping: "encKey"(string) to "encKey"(string) -->
      <xsl:if test="encKey">
        <encKey>
          <xsl:value-of select="encKey"/>
        </encKey>
      </xsl:if>
      <!-- a simple data mapping: "iccId"(string) to "iccId"(string) -->
      <xsl:if test="iccId">
        <iccId>
          <xsl:value-of select="iccId"/>
        </iccId>
      </xsl:if>
      <!-- a simple data mapping: "algoId"(int) to "algoId"(int) -->
      <xsl:if test="algoId">
        <algoId>
          <xsl:value-of select="algoId"/>
        </algoId>
      </xsl:if>
      <!-- a simple data mapping: "cv"(string) to "cv"(string) -->
      <xsl:if test="cv">
        <cv>
          <xsl:value-of select="cv"/>
        </cv>
      </xsl:if>
      <!-- a simple data mapping: "hmac"(string) to "hmac"(string) -->
      <xsl:if test="hmac">
        <hmac>
          <xsl:value-of select="hmac"/>
        </hmac>
      </xsl:if>
      <!-- a simple data mapping: "kdbId"(string) to "kdbId"(string) -->
      <xsl:if test="kdbId">
        <kdbId>
          <xsl:value-of select="kdbId"/>
        </kdbId>
      </xsl:if>
      <!-- a simple data mapping: "acsub"(int) to "acsub"(int) -->
      <xsl:if test="acsub">
        <acsub>
          <xsl:value-of select="acsub"/>
        </acsub>
      </xsl:if>
      <!-- a simple data mapping: "amf"(string) to "amf"(string) -->
      <xsl:if test="amf">
        <amf>
          <xsl:value-of select="amf"/>
        </amf>
      </xsl:if>
      <!-- a simple data mapping: "sqn"(string) to "sqn"(string) -->
      <xsl:if test="sqn">
        <sqn>
          <xsl:value-of select="sqn"/>
        </sqn>
      </xsl:if>
      <!-- a simple data mapping: "opcEncKey"(string) to "opcEncKey"(string) -->
      <xsl:if test="opcEncKey">
        <opcEncKey>
          <xsl:value-of select="opcEncKey"/>
        </opcEncKey>
      </xsl:if>
    </auc>
  </xsl:template>

  <!-- This rule represents an element mapping: "profile" to "profile".  -->
  <xsl:template match="profile"  mode="localProfileToProfile_1685540754">
    <profile>
      <!-- a simple data mapping: "givenName"(PrintableString128) to "givenName"(PrintableString128) -->
      <xsl:if test="givenName">
        <givenName>
          <xsl:value-of select="givenName"/>
        </givenName>
      </xsl:if>
      <!-- a simple data mapping: "surname"(PrintableString128) to "surname"(PrintableString128) -->
      <xsl:if test="surname">
        <surname>
          <xsl:value-of select="surname"/>
        </surname>
      </xsl:if>
      <!-- a simple data mapping: "username"(PrintableString128) to "username"(PrintableString128) -->
      <xsl:if test="username">
        <username>
          <xsl:value-of select="username"/>
        </username>
      </xsl:if>
      <!-- a simple data mapping: "password"(String128) to "password"(String128) -->
      <xsl:if test="password">
        <password>
          <xsl:value-of select="password"/>
        </password>
      </xsl:if>
      <!-- a simple data mapping: "loginPassword"(String128) to "loginPassword"(String128) -->
      <xsl:if test="loginPassword">
        <loginPassword>
          <xsl:value-of select="loginPassword"/>
        </loginPassword>
      </xsl:if>
      <!-- a simple data mapping: "prepaid"(boolean) to "prepaid"(boolean) -->
      <xsl:if test="prepaid">
        <prepaid>
          <xsl:value-of select="prepaid"/>
        </prepaid>
      </xsl:if>
      <!-- a simple data mapping: "roamingAllowed"(boolean) to "roamingAllowed"(boolean) -->
      <xsl:if test="roamingAllowed">
        <roamingAllowed>
          <xsl:value-of select="roamingAllowed"/>
        </roamingAllowed>
      </xsl:if>
      <!-- a simple data mapping: "notificationEmail"(EmailString) to "notificationEmail"(EmailString) -->
      <xsl:if test="notificationEmail">
        <notificationEmail>
          <xsl:value-of select="notificationEmail"/>
        </notificationEmail>
      </xsl:if>
      <!-- a simple data mapping: "preferredLanguage"(LanguageString2) to "preferredLanguage"(LanguageString2) -->
      <xsl:if test="preferredLanguage">
        <preferredLanguage>
          <xsl:value-of select="preferredLanguage"/>
        </preferredLanguage>
      </xsl:if>
    </profile>
  </xsl:template>

  <!-- This rule represents an element mapping: "hlr" to "hlr".  -->
  <xsl:template match="hlr"  mode="localHlrToHlr_1348927767">
    <hlr>
      <!-- a head to head mapping -->
      <xsl:choose>
        <xsl:when test="substring-after(./@xsi:type,':')='HLR'">
          <!-- variables for custom code -->
          <xsl:variable name="hlr" select="."/>
          <xsl:call-template name="copyNamespaceDeclarations">
            <xsl:with-param name="root" select="$hlr"/>
          </xsl:call-template>
          <xsl:copy-of select="$hlr/@*|$hlr/node()" copy-namespaces="yes"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:if test="./imsi">
            <imsi>
              <xsl:value-of select="./imsi"/>
            </imsi>
          </xsl:if>
          <xsl:for-each select="./contractId">
            <contractId>
              <xsl:value-of select="."/>
            </contractId>
          </xsl:for-each>
          <xsl:if test="./ntype">
            <ntype>
              <xsl:value-of select="./ntype"/>
            </ntype>
          </xsl:if>
          <xsl:if test="./imsiActive">
            <imsiActive>
              <xsl:value-of select="./imsiActive"/>
            </imsiActive>
          </xsl:if>
          <xsl:if test="./mobileSubscriberType">
            <mobileSubscriberType>
              <xsl:value-of select="./mobileSubscriberType"/>
            </mobileSubscriberType>
          </xsl:if>
          <xsl:if test="./umtsSubscriber">
            <umtsSubscriber>
              <xsl:copy-of select="./umtsSubscriber/@*|./umtsSubscriber/node()|./umtsSubscriber/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
            </umtsSubscriber>
          </xsl:if>
          <xsl:if test="./wllSubscriber">
            <wllSubscriber>
              <xsl:value-of select="./wllSubscriber"/>
            </wllSubscriber>
          </xsl:if>
          <xsl:if test="./tifSubscriber">
            <tifSubscriber>
              <xsl:copy-of select="./tifSubscriber/@*|./tifSubscriber/node()|./tifSubscriber/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
            </tifSubscriber>
          </xsl:if>
          <xsl:if test="./mscat">
            <mscat>
              <xsl:value-of select="./mscat"/>
            </mscat>
          </xsl:if>
          <xsl:if test="./odboc">
            <odboc>
              <xsl:value-of select="./odboc"/>
            </odboc>
          </xsl:if>
          <xsl:if test="./odbic">
            <odbic>
              <xsl:value-of select="./odbic"/>
            </odbic>
          </xsl:if>
          <xsl:if test="./odbr">
            <odbr>
              <xsl:value-of select="./odbr"/>
            </odbr>
          </xsl:if>
          <xsl:if test="./odboprc">
            <odboprc>
              <xsl:value-of select="./odboprc"/>
            </odboprc>
          </xsl:if>
          <xsl:if test="./odbssm">
            <odbssm>
              <xsl:value-of select="./odbssm"/>
            </odbssm>
          </xsl:if>
          <xsl:if test="./osb1">
            <osb1>
              <xsl:value-of select="./osb1"/>
            </osb1>
          </xsl:if>
          <xsl:if test="./osb2">
            <osb2>
              <xsl:value-of select="./osb2"/>
            </osb2>
          </xsl:if>
          <xsl:if test="./osb3">
            <osb3>
              <xsl:value-of select="./osb3"/>
            </osb3>
          </xsl:if>
          <xsl:if test="./osb4">
            <osb4>
              <xsl:value-of select="./osb4"/>
            </osb4>
          </xsl:if>
          <xsl:if test="./clip">
            <clip>
              <xsl:value-of select="./clip"/>
            </clip>
          </xsl:if>
          <xsl:if test="./clipOverride">
            <clipOverride>
              <xsl:value-of select="./clipOverride"/>
            </clipOverride>
          </xsl:if>
          <xsl:if test="./clir">
            <clir>
              <xsl:value-of select="./clir"/>
            </clir>
          </xsl:if>
          <xsl:if test="./colp">
            <colp>
              <xsl:value-of select="./colp"/>
            </colp>
          </xsl:if>
          <xsl:if test="./colpOverride">
            <colpOverride>
              <xsl:value-of select="./colpOverride"/>
            </colpOverride>
          </xsl:if>
          <xsl:if test="./colr">
            <colr>
              <xsl:value-of select="./colr"/>
            </colr>
          </xsl:if>
          <xsl:if test="./hold">
            <hold>
              <xsl:value-of select="./hold"/>
            </hold>
          </xsl:if>
          <xsl:if test="./mpty">
            <mpty>
              <xsl:value-of select="./mpty"/>
            </mpty>
          </xsl:if>
          <xsl:if test="./aoci">
            <aoci>
              <xsl:value-of select="./aoci"/>
            </aoci>
          </xsl:if>
          <xsl:if test="./aocc">
            <aocc>
              <xsl:value-of select="./aocc"/>
            </aocc>
          </xsl:if>
          <xsl:if test="./natccbs">
            <natccbs>
              <xsl:value-of select="./natccbs"/>
            </natccbs>
          </xsl:if>
          <xsl:if test="./natct">
            <natct>
              <xsl:value-of select="./natct"/>
            </natct>
          </xsl:if>
          <xsl:if test="./natHotbill">
            <natHotbill>
              <xsl:value-of select="./natHotbill"/>
            </natHotbill>
          </xsl:if>
          <xsl:if test="./natFR">
            <natFR>
              <xsl:value-of select="./natFR"/>
            </natFR>
          </xsl:if>
          <xsl:if test="./natusersig1">
            <natusersig1>
              <xsl:value-of select="./natusersig1"/>
            </natusersig1>
          </xsl:if>
          <xsl:if test="./ccbsa">
            <ccbsa>
              <xsl:value-of select="./ccbsa"/>
            </ccbsa>
          </xsl:if>
          <xsl:if test="./ccbsb">
            <ccbsb>
              <xsl:value-of select="./ccbsb"/>
            </ccbsb>
          </xsl:if>
          <xsl:if test="./natss01">
            <natss01>
              <xsl:value-of select="./natss01"/>
            </natss01>
          </xsl:if>
          <xsl:if test="./natss02">
            <natss02>
              <xsl:value-of select="./natss02"/>
            </natss02>
          </xsl:if>
          <xsl:if test="./natss03">
            <natss03>
              <xsl:value-of select="./natss03"/>
            </natss03>
          </xsl:if>
          <xsl:if test="./natss04">
            <natss04>
              <xsl:value-of select="./natss04"/>
            </natss04>
          </xsl:if>
          <xsl:if test="./natss05">
            <natss05>
              <xsl:value-of select="./natss05"/>
            </natss05>
          </xsl:if>
          <xsl:if test="./natss06">
            <natss06>
              <xsl:value-of select="./natss06"/>
            </natss06>
          </xsl:if>
          <xsl:if test="./natss07">
            <natss07>
              <xsl:value-of select="./natss07"/>
            </natss07>
          </xsl:if>
          <xsl:if test="./natss08">
            <natss08>
              <xsl:value-of select="./natss08"/>
            </natss08>
          </xsl:if>
          <xsl:if test="./natss09">
            <natss09>
              <xsl:value-of select="./natss09"/>
            </natss09>
          </xsl:if>
          <xsl:if test="./natss10">
            <natss10>
              <xsl:value-of select="./natss10"/>
            </natss10>
          </xsl:if>
          <xsl:if test="./natss11">
            <natss11>
              <xsl:value-of select="./natss11"/>
            </natss11>
          </xsl:if>
          <xsl:if test="./natss12">
            <natss12>
              <xsl:value-of select="./natss12"/>
            </natss12>
          </xsl:if>
          <xsl:if test="./natss13">
            <natss13>
              <xsl:value-of select="./natss13"/>
            </natss13>
          </xsl:if>
          <xsl:if test="./natss14">
            <natss14>
              <xsl:value-of select="./natss14"/>
            </natss14>
          </xsl:if>
          <xsl:if test="./natss15">
            <natss15>
              <xsl:value-of select="./natss15"/>
            </natss15>
          </xsl:if>
          <xsl:if test="./statusNatss01">
            <statusNatss01>
              <xsl:value-of select="./statusNatss01"/>
            </statusNatss01>
          </xsl:if>
          <xsl:if test="./statusNatss02">
            <statusNatss02>
              <xsl:value-of select="./statusNatss02"/>
            </statusNatss02>
          </xsl:if>
          <xsl:if test="./statusNatss03">
            <statusNatss03>
              <xsl:value-of select="./statusNatss03"/>
            </statusNatss03>
          </xsl:if>
          <xsl:if test="./statusNatss04">
            <statusNatss04>
              <xsl:value-of select="./statusNatss04"/>
            </statusNatss04>
          </xsl:if>
          <xsl:if test="./statusNatss05">
            <statusNatss05>
              <xsl:value-of select="./statusNatss05"/>
            </statusNatss05>
          </xsl:if>
          <xsl:if test="./statusNatss06">
            <statusNatss06>
              <xsl:value-of select="./statusNatss06"/>
            </statusNatss06>
          </xsl:if>
          <xsl:if test="./statusNatss07">
            <statusNatss07>
              <xsl:value-of select="./statusNatss07"/>
            </statusNatss07>
          </xsl:if>
          <xsl:if test="./statusNatss08">
            <statusNatss08>
              <xsl:value-of select="./statusNatss08"/>
            </statusNatss08>
          </xsl:if>
          <xsl:if test="./statusNatss09">
            <statusNatss09>
              <xsl:value-of select="./statusNatss09"/>
            </statusNatss09>
          </xsl:if>
          <xsl:if test="./statusNatss10">
            <statusNatss10>
              <xsl:value-of select="./statusNatss10"/>
            </statusNatss10>
          </xsl:if>
          <xsl:if test="./statusNatss11">
            <statusNatss11>
              <xsl:value-of select="./statusNatss11"/>
            </statusNatss11>
          </xsl:if>
          <xsl:if test="./statusNatss12">
            <statusNatss12>
              <xsl:value-of select="./statusNatss12"/>
            </statusNatss12>
          </xsl:if>
          <xsl:if test="./statusNatss13">
            <statusNatss13>
              <xsl:value-of select="./statusNatss13"/>
            </statusNatss13>
          </xsl:if>
          <xsl:if test="./statusNatss14">
            <statusNatss14>
              <xsl:value-of select="./statusNatss14"/>
            </statusNatss14>
          </xsl:if>
          <xsl:if test="./statusNatss15">
            <statusNatss15>
              <xsl:value-of select="./statusNatss15"/>
            </statusNatss15>
          </xsl:if>
          <xsl:for-each select="./subrelro">
            <subrelro>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </subrelro>
          </xsl:for-each>
          <xsl:if test="./nwa">
            <nwa>
              <xsl:value-of select="./nwa"/>
            </nwa>
          </xsl:if>
          <xsl:if test="./odbgprs">
            <odbgprs>
              <xsl:value-of select="./odbgprs"/>
            </odbgprs>
          </xsl:if>
          <xsl:if test="./rr">
            <rr>
              <xsl:value-of select="./rr"/>
            </rr>
          </xsl:if>
          <xsl:if test="./sr">
            <sr>
              <xsl:value-of select="./sr"/>
            </sr>
          </xsl:if>
          <xsl:for-each select="./vgrpid">
            <vgrpid>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </vgrpid>
          </xsl:for-each>
          <xsl:if test="./msp">
            <msp>
              <xsl:value-of select="./msp"/>
            </msp>
          </xsl:if>
          <xsl:if test="./odbsci">
            <odbsci>
              <xsl:value-of select="./odbsci"/>
            </odbsci>
          </xsl:if>
          <xsl:for-each select="./ts11">
            <ts11>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </ts11>
          </xsl:for-each>
          <xsl:for-each select="./ts21">
            <ts21>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </ts21>
          </xsl:for-each>
          <xsl:for-each select="./ts22">
            <ts22>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </ts22>
          </xsl:for-each>
          <xsl:for-each select="./ts61">
            <ts61>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </ts61>
          </xsl:for-each>
          <xsl:for-each select="./ts62">
            <ts62>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </ts62>
          </xsl:for-each>
          <xsl:for-each select="./vgcs">
            <vgcs>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </vgcs>
          </xsl:for-each>
          <xsl:for-each select="./vbs">
            <vbs>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </vbs>
          </xsl:for-each>
          <xsl:for-each select="./bs20genr">
            <bs20genr>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </bs20genr>
          </xsl:for-each>
          <xsl:for-each select="./bs21">
            <bs21>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </bs21>
          </xsl:for-each>
          <xsl:for-each select="./bs22">
            <bs22>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </bs22>
          </xsl:for-each>
          <xsl:for-each select="./bs23">
            <bs23>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </bs23>
          </xsl:for-each>
          <xsl:for-each select="./bs24">
            <bs24>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </bs24>
          </xsl:for-each>
          <xsl:for-each select="./bs25">
            <bs25>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </bs25>
          </xsl:for-each>
          <xsl:for-each select="./bs26">
            <bs26>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </bs26>
          </xsl:for-each>
          <xsl:for-each select="./bs30genr">
            <bs30genr>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </bs30genr>
          </xsl:for-each>
          <xsl:for-each select="./bs31">
            <bs31>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </bs31>
          </xsl:for-each>
          <xsl:for-each select="./bs32">
            <bs32>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </bs32>
          </xsl:for-each>
          <xsl:for-each select="./bs33">
            <bs33>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </bs33>
          </xsl:for-each>
          <xsl:for-each select="./bs34">
            <bs34>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </bs34>
          </xsl:for-each>
          <xsl:for-each select="./bs40genr">
            <bs40genr>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </bs40genr>
          </xsl:for-each>
          <xsl:for-each select="./bs41">
            <bs41>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </bs41>
          </xsl:for-each>
          <xsl:for-each select="./bs42">
            <bs42>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </bs42>
          </xsl:for-each>
          <xsl:for-each select="./bs44">
            <bs44>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </bs44>
          </xsl:for-each>
          <xsl:for-each select="./bs45">
            <bs45>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </bs45>
          </xsl:for-each>
          <xsl:for-each select="./bs46">
            <bs46>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </bs46>
          </xsl:for-each>
          <xsl:for-each select="./bs61a">
            <bs61a>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </bs61a>
          </xsl:for-each>
          <xsl:for-each select="./bs81a">
            <bs81a>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </bs81a>
          </xsl:for-each>
          <xsl:for-each select="./gprs">
            <gprs>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </gprs>
          </xsl:for-each>
          <xsl:for-each select="./ts21Gprs">
            <ts21Gprs>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </ts21Gprs>
          </xsl:for-each>
          <xsl:for-each select="./ts22Gprs">
            <ts22Gprs>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </ts22Gprs>
          </xsl:for-each>
          <xsl:for-each select="./cfu">
            <cfu>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </cfu>
          </xsl:for-each>
          <xsl:for-each select="./cfb">
            <cfb>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </cfb>
          </xsl:for-each>
          <xsl:for-each select="./cfnrc">
            <cfnrc>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </cfnrc>
          </xsl:for-each>
          <xsl:for-each select="./cfnry">
            <cfnry>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </cfnry>
          </xsl:for-each>
          <xsl:if test="./allccf">
            <allccf>
              <xsl:copy-of select="./allccf/@*|./allccf/node()|./allccf/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
            </allccf>
          </xsl:if>
          <xsl:if test="./allcf">
            <allcf>
              <xsl:copy-of select="./allcf/@*|./allcf/node()|./allcf/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
            </allcf>
          </xsl:if>
          <xsl:for-each select="./cfd">
            <cfd>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </cfd>
          </xsl:for-each>
          <xsl:for-each select="./caw">
            <caw>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </caw>
          </xsl:for-each>
          <xsl:for-each select="./cug">
            <cug>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </cug>
          </xsl:for-each>
          <xsl:for-each select="./cugbsg">
            <cugbsg>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </cugbsg>
          </xsl:for-each>
          <xsl:if test="./comcb">
            <comcb>
              <xsl:copy-of select="./comcb/@*|./comcb/node()|./comcb/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
            </comcb>
          </xsl:if>
          <xsl:for-each select="./baoc">
            <baoc>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </baoc>
          </xsl:for-each>
          <xsl:for-each select="./boic">
            <boic>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </boic>
          </xsl:for-each>
          <xsl:for-each select="./boicexhc">
            <boicexhc>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </boicexhc>
          </xsl:for-each>
          <xsl:for-each select="./boro">
            <boro>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </boro>
          </xsl:for-each>
          <xsl:for-each select="./baic">
            <baic>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </baic>
          </xsl:for-each>
          <xsl:for-each select="./bicroam">
            <bicroam>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </bicroam>
          </xsl:for-each>
          <xsl:if test="./emlpp">
            <emlpp>
              <xsl:copy-of select="./emlpp/@*|./emlpp/node()|./emlpp/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
            </emlpp>
          </xsl:if>
          <xsl:if test="./imsilink">
            <imsilink>
              <xsl:value-of select="./imsilink"/>
            </imsilink>
          </xsl:if>
          <xsl:if test="./isActiveIMSI">
            <isActiveIMSI>
              <xsl:value-of select="./isActiveIMSI"/>
            </isActiveIMSI>
          </xsl:if>
          <xsl:if test="./multiDevice">
            <multiDevice>
              <xsl:copy-of select="./multiDevice/@*|./multiDevice/node()|./multiDevice/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
            </multiDevice>
          </xsl:if>
          <xsl:for-each select="./rs">
            <rs>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </rs>
          </xsl:for-each>
          <xsl:for-each select="./srf">
            <srf>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </srf>
          </xsl:for-each>
          <xsl:for-each select="./followMe">
            <followMe>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </followMe>
          </xsl:for-each>
          <xsl:for-each select="./followMeAccessMatrix">
            <followMeAccessMatrix>
              <xsl:value-of select="."/>
            </followMeAccessMatrix>
          </xsl:for-each>
          <xsl:if test="./twincardImsi">
            <twincardImsi>
              <xsl:value-of select="./twincardImsi"/>
            </twincardImsi>
          </xsl:if>
          <xsl:if test="./actIMSIGprs">
            <actIMSIGprs>
              <xsl:value-of select="./actIMSIGprs"/>
            </actIMSIGprs>
          </xsl:if>
          <xsl:if test="./cuss">
            <cuss>
              <xsl:copy-of select="./cuss/@*|./cuss/node()|./cuss/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
            </cuss>
          </xsl:if>
          <xsl:if test="./crelss">
            <crelss>
              <xsl:copy-of select="./crelss/@*|./crelss/node()|./crelss/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
            </crelss>
          </xsl:if>
          <xsl:if test="./curelss">
            <curelss>
              <xsl:copy-of select="./curelss/@*|./curelss/node()|./curelss/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
            </curelss>
          </xsl:if>
          <xsl:if test="./plmnoss">
            <plmnoss>
              <xsl:copy-of select="./plmnoss/@*|./plmnoss/node()|./plmnoss/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
            </plmnoss>
          </xsl:if>
          <xsl:if test="./basicSelfLocation">
            <basicSelfLocation>
              <xsl:copy-of select="./basicSelfLocation/@*|./basicSelfLocation/node()|./basicSelfLocation/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
            </basicSelfLocation>
          </xsl:if>
          <xsl:if test="./autoSelfLocation">
            <autoSelfLocation>
              <xsl:copy-of select="./autoSelfLocation/@*|./autoSelfLocation/node()|./autoSelfLocation/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
            </autoSelfLocation>
          </xsl:if>
          <xsl:if test="./transferToThirdParty">
            <transferToThirdParty>
              <xsl:copy-of select="./transferToThirdParty/@*|./transferToThirdParty/node()|./transferToThirdParty/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
            </transferToThirdParty>
          </xsl:if>
          <xsl:if test="./callback">
            <callback>
              <xsl:copy-of select="./callback/@*|./callback/node()|./callback/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
            </callback>
          </xsl:if>
          <xsl:if test="./obGprs">
            <obGprs>
              <xsl:value-of select="./obGprs"/>
            </obGprs>
          </xsl:if>
          <xsl:if test="./optimalRouting">
            <optimalRouting>
              <xsl:value-of select="./optimalRouting"/>
            </optimalRouting>
          </xsl:if>
          <xsl:if test="./ndcLac">
            <ndcLac>
              <xsl:value-of select="./ndcLac"/>
            </ndcLac>
          </xsl:if>
          <xsl:if test="./imsiTraceReference">
            <imsiTraceReference>
              <xsl:value-of select="./imsiTraceReference"/>
            </imsiTraceReference>
          </xsl:if>
          <xsl:if test="./imsiTraceType">
            <imsiTraceType>
              <xsl:value-of select="./imsiTraceType"/>
            </imsiTraceType>
          </xsl:if>
          <xsl:if test="./expiryDate">
            <expiryDate>
              <xsl:value-of select="./expiryDate"/>
            </expiryDate>
          </xsl:if>
          <xsl:if test="./preferedInterexchangeCarrier">
            <preferedInterexchangeCarrier>
              <xsl:value-of select="./preferedInterexchangeCarrier"/>
            </preferedInterexchangeCarrier>
          </xsl:if>
          <xsl:for-each select="./vbsData">
            <vbsData>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </vbsData>
          </xsl:for-each>
          <xsl:if test="./generalChargingCharacteristics">
            <generalChargingCharacteristics>
              <xsl:copy-of select="./generalChargingCharacteristics/@*|./generalChargingCharacteristics/node()|./generalChargingCharacteristics/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
            </generalChargingCharacteristics>
          </xsl:if>
          <xsl:if test="./vlrid">
            <vlrid>
              <xsl:value-of select="./vlrid"/>
            </vlrid>
          </xsl:if>
          <xsl:for-each select="./pdpContext">
            <pdpContext>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </pdpContext>
          </xsl:for-each>
          <xsl:if test="./smscsi">
            <smscsi>
              <xsl:copy-of select="./smscsi/@*|./smscsi/node()|./smscsi/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
            </smscsi>
          </xsl:if>
          <xsl:if test="./ocsi">
            <ocsi>
              <xsl:copy-of select="./ocsi/@*|./ocsi/node()|./ocsi/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
            </ocsi>
          </xsl:if>
          <xsl:if test="./tcsi">
            <tcsi>
              <xsl:copy-of select="./tcsi/@*|./tcsi/node()|./tcsi/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
            </tcsi>
          </xsl:if>
          <xsl:for-each select="./ucsisub">
            <ucsisub>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </ucsisub>
          </xsl:for-each>
          <xsl:if test="./ucsiserv">
            <ucsiserv>
              <xsl:value-of select="./ucsiserv"/>
            </ucsiserv>
          </xsl:if>
          <xsl:if test="./gprscsi">
            <gprscsi>
              <xsl:copy-of select="./gprscsi/@*|./gprscsi/node()|./gprscsi/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
            </gprscsi>
          </xsl:if>
          <xsl:if test="./sscsi">
            <sscsi>
              <xsl:copy-of select="./sscsi/@*|./sscsi/node()|./sscsi/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
            </sscsi>
          </xsl:if>
          <xsl:if test="./mcsi">
            <mcsi>
              <xsl:copy-of select="./mcsi/@*|./mcsi/node()|./mcsi/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
            </mcsi>
          </xsl:if>
          <xsl:if test="./dcsi">
            <dcsi>
              <xsl:copy-of select="./dcsi/@*|./dcsi/node()|./dcsi/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
            </dcsi>
          </xsl:if>
          <xsl:if test="./vtcsi">
            <vtcsi>
              <xsl:copy-of select="./vtcsi/@*|./vtcsi/node()|./vtcsi/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
            </vtcsi>
          </xsl:if>
          <xsl:if test="./mtsmscsi">
            <mtsmscsi>
              <xsl:copy-of select="./mtsmscsi/@*|./mtsmscsi/node()|./mtsmscsi/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
            </mtsmscsi>
          </xsl:if>
          <xsl:if test="./mgcsi">
            <mgcsi>
              <xsl:copy-of select="./mgcsi/@*|./mgcsi/node()|./mgcsi/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
            </mgcsi>
          </xsl:if>
          <xsl:if test="./notifyToCSE">
            <notifyToCSE>
              <xsl:copy-of select="./notifyToCSE/@*|./notifyToCSE/node()|./notifyToCSE/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
            </notifyToCSE>
          </xsl:if>
          <xsl:if test="./vlrMobData">
            <vlrMobData>
              <xsl:copy-of select="./vlrMobData/@*|./vlrMobData/node()|./vlrMobData/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
            </vlrMobData>
          </xsl:if>
          <xsl:if test="./sgsnMobData">
            <sgsnMobData>
              <xsl:copy-of select="./sgsnMobData/@*|./sgsnMobData/node()|./sgsnMobData/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
            </sgsnMobData>
          </xsl:if>
          <xsl:for-each select="./msgWaitData">
            <msgWaitData>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </msgWaitData>
          </xsl:for-each>
          <xsl:if test="./changeOverIMSI">
            <changeOverIMSI>
              <xsl:value-of select="./changeOverIMSI"/>
            </changeOverIMSI>
          </xsl:if>
          <xsl:if test="./routingCategory">
            <routingCategory>
              <xsl:value-of select="./routingCategory"/>
            </routingCategory>
          </xsl:if>
          <xsl:if test="./routingCategoryExtension">
            <routingCategoryExtension>
              <xsl:value-of select="./routingCategoryExtension"/>
            </routingCategoryExtension>
          </xsl:if>
          <xsl:if test="./imeisv">
            <imeisv>
              <xsl:value-of select="./imeisv"/>
            </imeisv>
          </xsl:if>
          <xsl:if test="./cnap">
            <cnap>
              <xsl:value-of select="./cnap"/>
            </cnap>
          </xsl:if>
          <xsl:if test="./cnapOverride">
            <cnapOverride>
              <xsl:value-of select="./cnapOverride"/>
            </cnapOverride>
          </xsl:if>
          <xsl:if test="./allbs">
            <allbs>
              <xsl:copy-of select="./allbs/@*|./allbs/node()|./allbs/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
            </allbs>
          </xsl:if>
          <xsl:if test="./ect">
            <ect>
              <xsl:value-of select="./ect"/>
            </ect>
          </xsl:if>
          <xsl:if test="./enhsrisms">
            <enhsrisms>
              <xsl:value-of select="./enhsrisms"/>
            </enhsrisms>
          </xsl:if>
          <xsl:if test="./oick">
            <oick>
              <xsl:copy-of select="./oick/@*|./oick/node()|./oick/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
            </oick>
          </xsl:if>
          <xsl:for-each select="./tick">
            <tick>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </tick>
          </xsl:for-each>
          <xsl:if test="./eoick">
            <eoick>
              <xsl:copy-of select="./eoick/@*|./eoick/node()|./eoick/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
            </eoick>
          </xsl:if>
          <xsl:for-each select="./etick">
            <etick>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </etick>
          </xsl:for-each>
          <xsl:if test="./eoinci">
            <eoinci>
              <xsl:copy-of select="./eoinci/@*|./eoinci/node()|./eoinci/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
            </eoinci>
          </xsl:if>
          <xsl:for-each select="./etinci">
            <etinci>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </etinci>
          </xsl:for-each>
          <xsl:if test="./odbftno">
            <odbftno>
              <xsl:value-of select="./odbftno"/>
            </odbftno>
          </xsl:if>
          <xsl:if test="./prohibitedFtnoCategory">
            <prohibitedFtnoCategory>
              <xsl:value-of select="./prohibitedFtnoCategory"/>
            </prohibitedFtnoCategory>
          </xsl:if>
          <xsl:for-each select="./odbect">
            <odbect>
              <xsl:value-of select="."/>
            </odbect>
          </xsl:for-each>
          <xsl:if test="./clgPtyNumber">
            <clgPtyNumber>
              <xsl:value-of select="./clgPtyNumber"/>
            </clgPtyNumber>
          </xsl:if>
          <xsl:if test="./clgPtyData">
            <clgPtyData>
              <xsl:value-of select="./clgPtyData"/>
            </clgPtyData>
          </xsl:if>
          <xsl:if test="./lastCallTimeStamp">
            <lastCallTimeStamp>
              <xsl:value-of select="./lastCallTimeStamp"/>
            </lastCallTimeStamp>
          </xsl:if>
          <xsl:if test="./lcnService">
            <lcnService>
              <xsl:copy-of select="./lcnService/@*|./lcnService/node()|./lcnService/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
            </lcnService>
          </xsl:if>
          <xsl:if test="./ownMsisdnService">
            <ownMsisdnService>
              <xsl:copy-of select="./ownMsisdnService/@*|./ownMsisdnService/node()|./ownMsisdnService/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
            </ownMsisdnService>
          </xsl:if>
          <xsl:if test="./vlrIdService">
            <vlrIdService>
              <xsl:copy-of select="./vlrIdService/@*|./vlrIdService/node()|./vlrIdService/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
            </vlrIdService>
          </xsl:if>
          <xsl:if test="./actualTimeService">
            <actualTimeService>
              <xsl:copy-of select="./actualTimeService/@*|./actualTimeService/node()|./actualTimeService/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
            </actualTimeService>
          </xsl:if>
          <xsl:if test="./lastCallSimId">
            <lastCallSimId>
              <xsl:value-of select="./lastCallSimId"/>
            </lastCallSimId>
          </xsl:if>
          <xsl:if test="./multiSim">
            <multiSim>
              <xsl:copy-of select="./multiSim/@*|./multiSim/node()|./multiSim/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
            </multiSim>
          </xsl:if>
          <xsl:if test="./ussdClirService">
            <ussdClirService>
              <xsl:copy-of select="./ussdClirService/@*|./ussdClirService/node()|./ussdClirService/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
            </ussdClirService>
          </xsl:if>
          <xsl:for-each select="./ucsisubext">
            <ucsisubext>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </ucsisubext>
          </xsl:for-each>
          <xsl:if test="./roamSubscription">
            <roamSubscription>
              <xsl:copy-of select="./roamSubscription/@*|./roamSubscription/node()|./roamSubscription/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
            </roamSubscription>
          </xsl:if>
          <xsl:if test="./profileType">
            <profileType>
              <xsl:value-of select="./profileType"/>
            </profileType>
          </xsl:if>
          <xsl:if test="./commonMSISDN">
            <commonMSISDN>
              <xsl:value-of select="./commonMSISDN"/>
            </commonMSISDN>
          </xsl:if>
          <xsl:if test="./overrideCommonCLI">
            <overrideCommonCLI>
              <xsl:value-of select="./overrideCommonCLI"/>
            </overrideCommonCLI>
          </xsl:if>
          <xsl:if test="./mssMultiSim">
            <mssMultiSim>
              <xsl:copy-of select="./mssMultiSim/@*|./mssMultiSim/node()|./mssMultiSim/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
            </mssMultiSim>
          </xsl:if>
          <xsl:if test="./spatialTrigger">
            <spatialTrigger>
              <xsl:copy-of select="./spatialTrigger/@*|./spatialTrigger/node()|./spatialTrigger/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
            </spatialTrigger>
          </xsl:if>
          <xsl:if test="./insms">
            <insms>
              <xsl:copy-of select="./insms/@*|./insms/node()|./insms/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
            </insms>
          </xsl:if>
          <xsl:if test="./arc">
            <arc>
              <xsl:copy-of select="./arc/@*|./arc/node()|./arc/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
            </arc>
          </xsl:if>
          <xsl:if test="./acc">
            <acc>
              <xsl:copy-of select="./acc/@*|./acc/node()|./acc/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
            </acc>
          </xsl:if>
          <xsl:if test="./csFallback">
            <csFallback>
              <xsl:copy-of select="./csFallback/@*|./csFallback/node()|./csFallback/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
            </csFallback>
          </xsl:if>
          <xsl:if test="./smsSubData">
            <smsSubData>
              <xsl:copy-of select="./smsSubData/@*|./smsSubData/node()|./smsSubData/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
            </smsSubData>
          </xsl:if>
          <xsl:if test="./ftnTransIndex">
            <ftnTransIndex>
              <xsl:value-of select="./ftnTransIndex"/>
            </ftnTransIndex>
          </xsl:if>
          <xsl:if test="./icsIndicator">
            <icsIndicator>
              <xsl:value-of select="./icsIndicator"/>
            </icsIndicator>
          </xsl:if>
          <xsl:if test="./sset">
            <sset>
              <xsl:copy-of select="./sset/@*|./sset/node()|./sset/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
            </sset>
          </xsl:if>
          <xsl:if test="./emoick">
            <emoick>
              <xsl:copy-of select="./emoick/@*|./emoick/node()|./emoick/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
            </emoick>
          </xsl:if>
          <xsl:if test="./uEReachabilityReqInfo">
            <uEReachabilityReqInfo>
              <xsl:copy-of select="./uEReachabilityReqInfo/@*|./uEReachabilityReqInfo/node()|./uEReachabilityReqInfo/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
            </uEReachabilityReqInfo>
          </xsl:if>
          <xsl:if test="./meId">
            <meId>
              <xsl:value-of select="./meId"/>
            </meId>
          </xsl:if>
          <xsl:for-each select="./accessRestr">
            <accessRestr>
              <xsl:value-of select="."/>
            </accessRestr>
          </xsl:for-each>
          <xsl:if test="./odbBaroam">
            <odbBaroam>
              <xsl:value-of select="./odbBaroam"/>
            </odbBaroam>
          </xsl:if>
          <xsl:if test="./sgsnIdentity">
            <sgsnIdentity>
              <xsl:value-of select="./sgsnIdentity"/>
            </sgsnIdentity>
          </xsl:if>
          <xsl:if test="./sgsnRealm">
            <sgsnRealm>
              <xsl:value-of select="./sgsnRealm"/>
            </sgsnRealm>
          </xsl:if>
          <xsl:if test="./sgsnSupportedFeatures">
            <sgsnSupportedFeatures>
              <xsl:copy-of select="./sgsnSupportedFeatures/@*|./sgsnSupportedFeatures/node()|./sgsnSupportedFeatures/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
            </sgsnSupportedFeatures>
          </xsl:if>
          <xsl:if test="./refHplmnListName">
            <refHplmnListName>
              <xsl:value-of select="./refHplmnListName"/>
            </refHplmnListName>
          </xsl:if>
          <xsl:if test="./s6dSgsnNumber">
            <s6dSgsnNumber>
              <xsl:value-of select="./s6dSgsnNumber"/>
            </s6dSgsnNumber>
          </xsl:if>
          <xsl:if test="./s6dCombinedFlag">
            <s6dCombinedFlag>
              <xsl:value-of select="./s6dCombinedFlag"/>
            </s6dCombinedFlag>
          </xsl:if>
          <xsl:for-each select="./notification">
            <notification>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </notification>
          </xsl:for-each>
          <xsl:if test="./s6dLocUpdateTimestamp">
            <s6dLocUpdateTimestamp>
              <xsl:value-of select="./s6dLocUpdateTimestamp"/>
            </s6dLocUpdateTimestamp>
          </xsl:if>
          <xsl:if test="./eps">
            <eps>
              <xsl:copy-of select="./eps/@*|./eps/node()|./eps/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
            </eps>
          </xsl:if>
          <xsl:for-each select="./epsPdnContext">
            <epsPdnContext>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </epsPdnContext>
          </xsl:for-each>
          <xsl:if test="./epsRoamAreaName">
            <epsRoamAreaName>
              <xsl:value-of select="./epsRoamAreaName"/>
            </epsRoamAreaName>
          </xsl:if>
          <xsl:if test="./epsPsRoamAreaMmeName">
            <epsPsRoamAreaMmeName>
              <xsl:value-of select="./epsPsRoamAreaMmeName"/>
            </epsPsRoamAreaMmeName>
          </xsl:if>
          <xsl:if test="./epsRoamSubscriptionInfoName">
            <epsRoamSubscriptionInfoName>
              <xsl:value-of select="./epsRoamSubscriptionInfoName"/>
            </epsRoamSubscriptionInfoName>
          </xsl:if>
          <xsl:for-each select="./epsCsg">
            <epsCsg>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </epsCsg>
          </xsl:for-each>
          <xsl:if test="./epsTracingProfile">
            <epsTracingProfile>
              <xsl:copy-of select="./epsTracingProfile/@*|./epsTracingProfile/node()|./epsTracingProfile/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
            </epsTracingProfile>
          </xsl:if>
          <xsl:for-each select="./epsPsRszi">
            <epsPsRszi>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </epsPsRszi>
          </xsl:for-each>
          <xsl:for-each select="./epsASNotificationInfo">
            <epsASNotificationInfo>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </epsASNotificationInfo>
          </xsl:for-each>
          <xsl:if test="./epsAdditionalHssServiceData">
            <epsAdditionalHssServiceData>
              <xsl:copy-of select="./epsAdditionalHssServiceData/@*|./epsAdditionalHssServiceData/node()|./epsAdditionalHssServiceData/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
            </epsAdditionalHssServiceData>
          </xsl:if>
          <xsl:if test="./csarp">
            <csarp>
              <xsl:copy-of select="./csarp/@*|./csarp/node()|./csarp/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
            </csarp>
          </xsl:if>
          <xsl:if test="./refFraudProfileName">
            <refFraudProfileName>
              <xsl:value-of select="./refFraudProfileName"/>
            </refFraudProfileName>
          </xsl:if>
          <xsl:if test="./mrbt">
            <mrbt>
              <xsl:value-of select="./mrbt"/>
            </mrbt>
          </xsl:if>
          <xsl:if test="./gsmTrace">
            <gsmTrace>
              <xsl:copy-of select="./gsmTrace/@*|./gsmTrace/node()|./gsmTrace/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
            </gsmTrace>
          </xsl:if>
          <xsl:for-each select="./subFraudObsInfo">
            <subFraudObsInfo>
              <xsl:copy-of select="null" copy-namespaces="yes"/>
            </subFraudObsInfo>
          </xsl:for-each>
          <xsl:if test="./simObsActive">
            <simObsActive>
              <xsl:value-of select="./simObsActive"/>
            </simObsActive>
          </xsl:if>
          <xsl:if test="./chbha">
            <chbha>
              <xsl:copy-of select="./chbha/@*|./chbha/node()|./chbha/namespace::node()[not(name() = '')]" copy-namespaces="yes"/>
            </chbha>
          </xsl:if>
          <xsl:if test="./primaryBasicService">
            <primaryBasicService>
              <xsl:value-of select="./primaryBasicService"/>
            </primaryBasicService>
          </xsl:if>
        </xsl:otherwise>
      </xsl:choose>
    </hlr>
  </xsl:template>

  <!-- *****************    Utility Templates    ******************  -->
  <!-- copy the namespace declarations from the source to the target -->
  <xsl:template name="copyNamespaceDeclarations">
    <xsl:param name="root"/>
    <xsl:for-each select="$root/namespace::node()[not(name() = '')]">
      <xsl:copy/>
    </xsl:for-each>
  </xsl:template>
</xsl:stylesheet>
